#!/bin/bash

# AIEN Backend - –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# –ê–≤—Ç–æ—Ä: AIEN Team
# –í–µ—Ä—Å–∏—è: 1.0.0

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
print_message() {
    echo -e "${BLUE}[AIEN]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    print_message "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    if ! command -v docker &> /dev/null; then
        print_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker: https://docs.docker.com/get-docker/"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        print_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose: https://docs.docker.com/compose/install/"
        exit 1
    fi
    
    print_success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
check_ports() {
    print_message "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤..."
    
    local ports=(8080 8081 8083 8084 5432 6379 9000 9001 11434)
    local occupied_ports=()
    
    for port in "${ports[@]}"; do
        if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1; then
            occupied_ports+=($port)
        fi
    done
    
    if [ ${#occupied_ports[@]} -gt 0 ]; then
        print_warning "–°–ª–µ–¥—É—é—â–∏–µ –ø–æ—Ä—Ç—ã –∑–∞–Ω—è—Ç—ã: ${occupied_ports[*]}"
        print_warning "–í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ –∏–ª–∏ –ø–æ—Ä—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥—Ä—É–≥–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏"
        read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi
    
    print_success "–ü–æ—Ä—Ç—ã —Å–≤–æ–±–æ–¥–Ω—ã"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
create_directories() {
    print_message "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
    
    mkdir -p logs
    mkdir -p data/postgres
    mkdir -p data/minio
    mkdir -p data/ollama
    
    print_success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã"
}

# –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
build_images() {
    print_message "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..."
    
    # –°–±–æ—Ä–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    docker-compose -f docker-compose.prod.yml build --parallel
    
    print_success "–û–±—Ä–∞–∑—ã —Å–æ–±—Ä–∞–Ω—ã"
}

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
start_services() {
    print_message "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    docker-compose -f docker-compose.prod.yml up -d
    
    print_success "–°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã"
}

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
wait_for_services() {
    print_message "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    local max_attempts=60
    local attempt=0
    
    while [ $attempt -lt $max_attempts ]; do
        if curl -s http://localhost:8080/health >/dev/null 2>&1; then
            print_success "API Gateway –≥–æ—Ç–æ–≤"
            break
        fi
        
        attempt=$((attempt + 1))
        print_message "–ü–æ–ø—ã—Ç–∫–∞ $attempt/$max_attempts - –æ–∂–∏–¥–∞–Ω–∏–µ API Gateway..."
        sleep 5
    done
    
    if [ $attempt -eq $max_attempts ]; then
        print_error "API Gateway –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ $max_attempts –ø–æ–ø—ã—Ç–æ–∫"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    sleep 10
    
    if curl -s http://localhost:8083/health >/dev/null 2>&1; then
        print_success "Data Analysis Service –≥–æ—Ç–æ–≤"
    else
        print_warning "Data Analysis Service –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    fi
    
    if curl -s http://localhost:8081/health >/dev/null 2>&1; then
        print_success "File Service –≥–æ—Ç–æ–≤"
    else
        print_warning "File Service –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    fi
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
show_status() {
    print_message "–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
    echo
    
    # API Gateway
    if curl -s http://localhost:8080/health >/dev/null 2>&1; then
        print_success "‚úÖ API Gateway: http://localhost:8080"
    else
        print_error "‚ùå API Gateway: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    # File Service
    if curl -s http://localhost:8081/health >/dev/null 2>&1; then
        print_success "‚úÖ File Service: http://localhost:8081"
    else
        print_error "‚ùå File Service: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    # Data Analysis Service
    if curl -s http://localhost:8083/health >/dev/null 2>&1; then
        print_success "‚úÖ Data Analysis Service: http://localhost:8083"
    else
        print_error "‚ùå Data Analysis Service: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    # Adminer
    if curl -s http://localhost:8084 >/dev/null 2>&1; then
        print_success "‚úÖ Adminer: http://localhost:8084"
    else
        print_error "‚ùå Adminer: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    # MinIO
    if curl -s http://localhost:9000 >/dev/null 2>&1; then
        print_success "‚úÖ MinIO: http://localhost:9000"
    else
        print_error "‚ùå MinIO: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    echo
    print_message "–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:"
    echo "  üìä API Gateway: http://localhost:8080"
    echo "  üìÅ File Service: http://localhost:8081"
    echo "  üîç Data Analysis: http://localhost:8083"
    echo "  üóÑÔ∏è  Database Admin: http://localhost:8084"
    echo "  üì¶ MinIO Console: http://localhost:9001"
    echo "  ü§ñ Ollama: http://localhost:11434"
}

# –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏
show_logs() {
    print_message "–õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞):"
    docker-compose -f docker-compose.prod.yml logs -f
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
stop_services() {
    print_message "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    docker-compose -f docker-compose.prod.yml down
    print_success "–°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
clean_data() {
    print_warning "–≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ (–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö, —Ñ–∞–π–ª—ã, –º–æ–¥–µ–ª–∏)"
    read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        print_message "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
        docker-compose -f docker-compose.prod.yml down -v
        print_message "–£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö..."
        sudo rm -rf data/
        print_success "–î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã"
    fi
}

# –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å
show_help() {
    echo "AIEN Backend - –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö"
    echo
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–∫–æ–º–∞–Ω–¥–∞]"
    echo
    echo "–ö–æ–º–∞–Ω–¥—ã:"
    echo "  start     - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
    echo "  stop      - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
    echo "  restart   - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
    echo "  status    - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo "  logs      - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"
    echo "  clean     - –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ"
    echo "  help      - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0 start    # –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
    echo "  $0 status   # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å"
    echo "  $0 logs     # –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "üöÄ AIEN Backend - –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö"
    echo "========================================"
    echo
    
    case "${1:-start}" in
        "start")
            check_dependencies
            check_ports
            create_directories
            build_images
            start_services
            wait_for_services
            show_status
            ;;
        "stop")
            stop_services
            ;;
        "restart")
            stop_services
            sleep 5
            main start
            ;;
        "status")
            show_status
            ;;
        "logs")
            show_logs
            ;;
        "clean")
            clean_data
            ;;
        "help"|"-h"|"--help")
            show_help
            ;;
        *)
            print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1"
            show_help
            exit 1
            ;;
    esac
}

# –ó–∞–ø—É—Å–∫
main "$@"