// proto/gateway.proto
syntax = "proto3";

package gateway;

option go_package = "./gen;gen";

import "google/api/annotations.proto";

// Основной сервис API Gateway
service DataEngineeringAssistant {
  // Загрузка CSV файла
  rpc UploadCSV(UploadCSVRequest) returns (UploadFileResponse) {
    option (google.api.http) = {
      post: "/v1/files/upload/csv"
      body: "*"
    };
  }

  // Загрузка JSON файла
  rpc UploadJSON(UploadJSONRequest) returns (UploadFileResponse) {
    option (google.api.http) = {
      post: "/v1/files/upload/json"
      body: "*"
    };
  }

  // Загрузка XML файла
  rpc UploadXML(UploadXMLRequest) returns (UploadFileResponse) {
    option (google.api.http) = {
      post: "/v1/files/upload/xml"
      body: "*"
    };
  }

  // Подключение к базе данных
  rpc ConnectDatabase(DatabaseConnectionRequest) returns (DatabaseConnectionResponse) {
    option (google.api.http) = {
      post: "/v1/database/connect"
      body: "*"
    };
  }

  // Анализ источника + генерация рекомендаций и пайплайна
  rpc CreatePipeline(CreatePipelineRequest) returns (CreatePipelineResponse) {
    option (google.api.http) = {
      post: "/v1/pipelines"
      body: "*"
    };
  }

  // Получить статус пайплайна (опционально для MVP)
  rpc GetPipeline(GetPipelineRequest) returns (PipelineDetails) {
    option (google.api.http) = {
      get: "/v1/pipelines/{pipeline_id}"
    };
  }

  // Запуск переноса данных в PostgreSQL
  rpc StartPostgresTransfer(StartTransferRequest) returns (StartTransferResponse) {
    option (google.api.http) = {
      post: "/v1/transfer/postgres"
      body: "*"
    };
  }

  // Запуск переноса данных в ClickHouse
  rpc StartClickHouseTransfer(StartTransferRequest) returns (StartTransferResponse) {
    option (google.api.http) = {
      post: "/v1/transfer/clickhouse"
      body: "*"
    };
  }

  // Запуск переноса данных в HDFS
  rpc StartHDFSTransfer(StartTransferRequest) returns (StartTransferResponse) {
    option (google.api.http) = {
      post: "/v1/transfer/hdfs"
      body: "*"
    };
  }

  // Получить статус переноса
  rpc GetTransferStatus(GetTransferStatusRequest) returns (GetTransferStatusResponse) {
    option (google.api.http) = {
      get: "/v1/transfer/status/{transfer_id}"
    };
  }

  // Отменить перенос
  rpc CancelTransfer(CancelTransferRequest) returns (CancelTransferResponse) {
    option (google.api.http) = {
      post: "/v1/transfer/cancel"
      body: "*"
    };
  }
}

// ========= ЗАПРОСЫ =========

// Загрузка CSV файла
message UploadCSVRequest {
  string user_id = 1;
  // Файл передается через multipart/form-data
}

// Загрузка JSON файла
message UploadJSONRequest {
  string user_id = 1;
  // Файл передается через multipart/form-data
}

// Загрузка XML файла
message UploadXMLRequest {
  string user_id = 1;
  // Файл передается через multipart/form-data
}

// Подключение к базе данных
message DatabaseConnectionRequest {
  string user_id = 1;
  string database_type = 2; // "postgres", "mysql", "oracle", "sqlserver"
  string host = 3;
  int32 port = 4;
  string database = 5;
  string username = 6;
  string password = 7;
  string table_name = 8; // опционально, для анализа конкретной таблицы
}

message DatabaseConnectionResponse {
  string connection_id = 1;
  string status = 2; // "connected", "failed"
  string message = 3;
  UnifiedDataProfile data_profile = 4; // профиль данных из БД
}

message UploadFileResponse {
  string file_id = 1;
  string status = 2; // "uploaded", "failed"
  string message = 3;
}

message CreatePipelineRequest {
  DataSource source = 1;
  DataTarget target = 2;
  string user_id = 3; // для аудита
  string file_id = 4; // опционально, если используется загруженный файл
}

message DataSource {
  oneof type {
    FileSource file = 1;
    DatabaseSource db = 2;
    StreamSource stream = 3;
  }
  string connection_string = 4; // опционально, для БД/Kafka
  string credentials_ref = 5;   // ссылка на секрет (Vault/K8s)
}

message FileSource {
  string format = 1; // "csv", "json", "xml"
  string url = 2;    // URL файла или временный upload ID
}

message DatabaseSource {
  string type = 1;   // "postgres", "clickhouse"
  string host = 2;
  int32 port = 3;
  string database = 4;
  string table = 5;
  string username = 6;
  string password = 7; // ⚠️ в реальности — только через credentials_ref!
}

message StreamSource {
  string type = 1;   // "kafka"
  string topic = 2;
  string bootstrap_servers = 3;
}

message DataTarget {
  string type = 1;   // "postgres", "clickhouse", "hdfs"
  string connection_string = 2;
  string table_name = 3;
  string credentials_ref = 4;
}

// ========= ПЕРЕНОС ДАННЫХ =========

// Запрос на запуск переноса данных
message StartTransferRequest {
  string pipeline_id = 1;        // ID созданного пайплайна
  string user_id = 2;            // ID пользователя
  string target_type = 3;        // "postgres", "clickhouse", "hdfs"
  string target_connection = 4;  // строка подключения к целевой системе
  string target_table = 5;        // имя таблицы/путь в целевой системе
  map<string, string> options = 6; // дополнительные опции переноса
}

// Ответ на запуск переноса
message StartTransferResponse {
  string transfer_id = 1;
  string status = 2;             // "started", "failed"
  string message = 3;
  int64 estimated_duration = 4;  // примерная длительность в секундах
  int64 estimated_size = 5;      // примерный размер данных в байтах
}

// Запрос статуса переноса
message GetTransferStatusRequest {
  string transfer_id = 1;
}

// Ответ со статусом переноса
message GetTransferStatusResponse {
  string transfer_id = 1;
  string status = 2;             // "pending", "running", "completed", "failed", "cancelled"
  string message = 3;
  int32 progress_percent = 4;     // прогресс в процентах
  int64 processed_rows = 5;       // количество обработанных строк
  int64 total_rows = 6;          // общее количество строк
  int64 processed_bytes = 7;     // количество обработанных байт
  int64 total_bytes = 8;         // общий размер данных
  string started_at = 9;          // время начала
  string completed_at = 10;       // время завершения
  string error_message = 11;     // сообщение об ошибке
  map<string, string> metadata = 12; // дополнительная информация
}

// Запрос отмены переноса
message CancelTransferRequest {
  string transfer_id = 1;
  string user_id = 2;
}

// Ответ на отмену переноса
message CancelTransferResponse {
  string transfer_id = 1;
  string status = 2;             // "cancelled", "not_found"
  string message = 3;
}

// ========= ОТВЕТЫ =========

message CreatePipelineResponse {
  string pipeline_id = 1;
  string status = 2; // "created", "failed"
  string explanation = 3; // от LLM: "Я вижу, что данные временные..."
  string ddl_script = 4;
  string dag_yaml = 5;   // сгенерированный Airflow DAG
  string visualization = 6; // Mermaid или JSON для UI
  UnifiedDataProfile data_profile = 7; // профиль данных в едином формате
}

// Единый формат данных для передачи в LLM
message UnifiedDataProfile {
  string data_type = 1; // "timeseries", "transactional", "log", "unknown"
  int32 total_rows = 2;
  int32 sampled_rows = 3;
  repeated UnifiedField fields = 4;
  string sample_data = 5; // JSON с примерами данных
  string data_quality_score = 6; // оценка качества данных
}

message UnifiedField {
  string name = 1;
  string type = 2; // "string", "int", "float", "datetime", "bool", "json"
  bool nullable = 3;
  int32 null_count = 4;
  string sample_value = 5;
  double min_value = 6;
  double max_value = 7;
  string description = 8; // описание поля от LLM
}

message GetPipelineRequest {
  string pipeline_id = 1;
}

message PipelineDetails {
  string pipeline_id = 1;
  string status = 2;
  string dag_yaml = 3;
  string last_run_status = 4;
}