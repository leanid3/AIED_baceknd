// proto/gateway.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: ateway.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DataEngineeringAssistant_UploadCSV_FullMethodName               = "/gateway.DataEngineeringAssistant/UploadCSV"
	DataEngineeringAssistant_UploadJSON_FullMethodName              = "/gateway.DataEngineeringAssistant/UploadJSON"
	DataEngineeringAssistant_UploadXML_FullMethodName               = "/gateway.DataEngineeringAssistant/UploadXML"
	DataEngineeringAssistant_ConnectDatabase_FullMethodName         = "/gateway.DataEngineeringAssistant/ConnectDatabase"
	DataEngineeringAssistant_CreatePipeline_FullMethodName          = "/gateway.DataEngineeringAssistant/CreatePipeline"
	DataEngineeringAssistant_GetPipeline_FullMethodName             = "/gateway.DataEngineeringAssistant/GetPipeline"
	DataEngineeringAssistant_StartPostgresTransfer_FullMethodName   = "/gateway.DataEngineeringAssistant/StartPostgresTransfer"
	DataEngineeringAssistant_StartClickHouseTransfer_FullMethodName = "/gateway.DataEngineeringAssistant/StartClickHouseTransfer"
	DataEngineeringAssistant_StartHDFSTransfer_FullMethodName       = "/gateway.DataEngineeringAssistant/StartHDFSTransfer"
	DataEngineeringAssistant_GetTransferStatus_FullMethodName       = "/gateway.DataEngineeringAssistant/GetTransferStatus"
	DataEngineeringAssistant_CancelTransfer_FullMethodName          = "/gateway.DataEngineeringAssistant/CancelTransfer"
)

// DataEngineeringAssistantClient is the client API for DataEngineeringAssistant service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Основной сервис API Gateway
type DataEngineeringAssistantClient interface {
	// Загрузка CSV файла
	UploadCSV(ctx context.Context, in *UploadCSVRequest, opts ...grpc.CallOption) (*UploadFileResponse, error)
	// Загрузка JSON файла
	UploadJSON(ctx context.Context, in *UploadJSONRequest, opts ...grpc.CallOption) (*UploadFileResponse, error)
	// Загрузка XML файла
	UploadXML(ctx context.Context, in *UploadXMLRequest, opts ...grpc.CallOption) (*UploadFileResponse, error)
	// Подключение к базе данных
	ConnectDatabase(ctx context.Context, in *DatabaseConnectionRequest, opts ...grpc.CallOption) (*DatabaseConnectionResponse, error)
	// Анализ источника + генерация рекомендаций и пайплайна
	CreatePipeline(ctx context.Context, in *CreatePipelineRequest, opts ...grpc.CallOption) (*CreatePipelineResponse, error)
	// Получить статус пайплайна (опционально для MVP)
	GetPipeline(ctx context.Context, in *GetPipelineRequest, opts ...grpc.CallOption) (*PipelineDetails, error)
	// Запуск переноса данных в PostgreSQL
	StartPostgresTransfer(ctx context.Context, in *StartTransferRequest, opts ...grpc.CallOption) (*StartTransferResponse, error)
	// Запуск переноса данных в ClickHouse
	StartClickHouseTransfer(ctx context.Context, in *StartTransferRequest, opts ...grpc.CallOption) (*StartTransferResponse, error)
	// Запуск переноса данных в HDFS
	StartHDFSTransfer(ctx context.Context, in *StartTransferRequest, opts ...grpc.CallOption) (*StartTransferResponse, error)
	// Получить статус переноса
	GetTransferStatus(ctx context.Context, in *GetTransferStatusRequest, opts ...grpc.CallOption) (*GetTransferStatusResponse, error)
	// Отменить перенос
	CancelTransfer(ctx context.Context, in *CancelTransferRequest, opts ...grpc.CallOption) (*CancelTransferResponse, error)
}

type dataEngineeringAssistantClient struct {
	cc grpc.ClientConnInterface
}

func NewDataEngineeringAssistantClient(cc grpc.ClientConnInterface) DataEngineeringAssistantClient {
	return &dataEngineeringAssistantClient{cc}
}

func (c *dataEngineeringAssistantClient) UploadCSV(ctx context.Context, in *UploadCSVRequest, opts ...grpc.CallOption) (*UploadFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadFileResponse)
	err := c.cc.Invoke(ctx, DataEngineeringAssistant_UploadCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataEngineeringAssistantClient) UploadJSON(ctx context.Context, in *UploadJSONRequest, opts ...grpc.CallOption) (*UploadFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadFileResponse)
	err := c.cc.Invoke(ctx, DataEngineeringAssistant_UploadJSON_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataEngineeringAssistantClient) UploadXML(ctx context.Context, in *UploadXMLRequest, opts ...grpc.CallOption) (*UploadFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadFileResponse)
	err := c.cc.Invoke(ctx, DataEngineeringAssistant_UploadXML_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataEngineeringAssistantClient) ConnectDatabase(ctx context.Context, in *DatabaseConnectionRequest, opts ...grpc.CallOption) (*DatabaseConnectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DatabaseConnectionResponse)
	err := c.cc.Invoke(ctx, DataEngineeringAssistant_ConnectDatabase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataEngineeringAssistantClient) CreatePipeline(ctx context.Context, in *CreatePipelineRequest, opts ...grpc.CallOption) (*CreatePipelineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePipelineResponse)
	err := c.cc.Invoke(ctx, DataEngineeringAssistant_CreatePipeline_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataEngineeringAssistantClient) GetPipeline(ctx context.Context, in *GetPipelineRequest, opts ...grpc.CallOption) (*PipelineDetails, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PipelineDetails)
	err := c.cc.Invoke(ctx, DataEngineeringAssistant_GetPipeline_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataEngineeringAssistantClient) StartPostgresTransfer(ctx context.Context, in *StartTransferRequest, opts ...grpc.CallOption) (*StartTransferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartTransferResponse)
	err := c.cc.Invoke(ctx, DataEngineeringAssistant_StartPostgresTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataEngineeringAssistantClient) StartClickHouseTransfer(ctx context.Context, in *StartTransferRequest, opts ...grpc.CallOption) (*StartTransferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartTransferResponse)
	err := c.cc.Invoke(ctx, DataEngineeringAssistant_StartClickHouseTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataEngineeringAssistantClient) StartHDFSTransfer(ctx context.Context, in *StartTransferRequest, opts ...grpc.CallOption) (*StartTransferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartTransferResponse)
	err := c.cc.Invoke(ctx, DataEngineeringAssistant_StartHDFSTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataEngineeringAssistantClient) GetTransferStatus(ctx context.Context, in *GetTransferStatusRequest, opts ...grpc.CallOption) (*GetTransferStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransferStatusResponse)
	err := c.cc.Invoke(ctx, DataEngineeringAssistant_GetTransferStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataEngineeringAssistantClient) CancelTransfer(ctx context.Context, in *CancelTransferRequest, opts ...grpc.CallOption) (*CancelTransferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelTransferResponse)
	err := c.cc.Invoke(ctx, DataEngineeringAssistant_CancelTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataEngineeringAssistantServer is the server API for DataEngineeringAssistant service.
// All implementations must embed UnimplementedDataEngineeringAssistantServer
// for forward compatibility.
//
// Основной сервис API Gateway
type DataEngineeringAssistantServer interface {
	// Загрузка CSV файла
	UploadCSV(context.Context, *UploadCSVRequest) (*UploadFileResponse, error)
	// Загрузка JSON файла
	UploadJSON(context.Context, *UploadJSONRequest) (*UploadFileResponse, error)
	// Загрузка XML файла
	UploadXML(context.Context, *UploadXMLRequest) (*UploadFileResponse, error)
	// Подключение к базе данных
	ConnectDatabase(context.Context, *DatabaseConnectionRequest) (*DatabaseConnectionResponse, error)
	// Анализ источника + генерация рекомендаций и пайплайна
	CreatePipeline(context.Context, *CreatePipelineRequest) (*CreatePipelineResponse, error)
	// Получить статус пайплайна (опционально для MVP)
	GetPipeline(context.Context, *GetPipelineRequest) (*PipelineDetails, error)
	// Запуск переноса данных в PostgreSQL
	StartPostgresTransfer(context.Context, *StartTransferRequest) (*StartTransferResponse, error)
	// Запуск переноса данных в ClickHouse
	StartClickHouseTransfer(context.Context, *StartTransferRequest) (*StartTransferResponse, error)
	// Запуск переноса данных в HDFS
	StartHDFSTransfer(context.Context, *StartTransferRequest) (*StartTransferResponse, error)
	// Получить статус переноса
	GetTransferStatus(context.Context, *GetTransferStatusRequest) (*GetTransferStatusResponse, error)
	// Отменить перенос
	CancelTransfer(context.Context, *CancelTransferRequest) (*CancelTransferResponse, error)
	mustEmbedUnimplementedDataEngineeringAssistantServer()
}

// UnimplementedDataEngineeringAssistantServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDataEngineeringAssistantServer struct{}

func (UnimplementedDataEngineeringAssistantServer) UploadCSV(context.Context, *UploadCSVRequest) (*UploadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadCSV not implemented")
}
func (UnimplementedDataEngineeringAssistantServer) UploadJSON(context.Context, *UploadJSONRequest) (*UploadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadJSON not implemented")
}
func (UnimplementedDataEngineeringAssistantServer) UploadXML(context.Context, *UploadXMLRequest) (*UploadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadXML not implemented")
}
func (UnimplementedDataEngineeringAssistantServer) ConnectDatabase(context.Context, *DatabaseConnectionRequest) (*DatabaseConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectDatabase not implemented")
}
func (UnimplementedDataEngineeringAssistantServer) CreatePipeline(context.Context, *CreatePipelineRequest) (*CreatePipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePipeline not implemented")
}
func (UnimplementedDataEngineeringAssistantServer) GetPipeline(context.Context, *GetPipelineRequest) (*PipelineDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPipeline not implemented")
}
func (UnimplementedDataEngineeringAssistantServer) StartPostgresTransfer(context.Context, *StartTransferRequest) (*StartTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartPostgresTransfer not implemented")
}
func (UnimplementedDataEngineeringAssistantServer) StartClickHouseTransfer(context.Context, *StartTransferRequest) (*StartTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartClickHouseTransfer not implemented")
}
func (UnimplementedDataEngineeringAssistantServer) StartHDFSTransfer(context.Context, *StartTransferRequest) (*StartTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartHDFSTransfer not implemented")
}
func (UnimplementedDataEngineeringAssistantServer) GetTransferStatus(context.Context, *GetTransferStatusRequest) (*GetTransferStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransferStatus not implemented")
}
func (UnimplementedDataEngineeringAssistantServer) CancelTransfer(context.Context, *CancelTransferRequest) (*CancelTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTransfer not implemented")
}
func (UnimplementedDataEngineeringAssistantServer) mustEmbedUnimplementedDataEngineeringAssistantServer() {
}
func (UnimplementedDataEngineeringAssistantServer) testEmbeddedByValue() {}

// UnsafeDataEngineeringAssistantServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataEngineeringAssistantServer will
// result in compilation errors.
type UnsafeDataEngineeringAssistantServer interface {
	mustEmbedUnimplementedDataEngineeringAssistantServer()
}

func RegisterDataEngineeringAssistantServer(s grpc.ServiceRegistrar, srv DataEngineeringAssistantServer) {
	// If the following call pancis, it indicates UnimplementedDataEngineeringAssistantServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DataEngineeringAssistant_ServiceDesc, srv)
}

func _DataEngineeringAssistant_UploadCSV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadCSVRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataEngineeringAssistantServer).UploadCSV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataEngineeringAssistant_UploadCSV_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataEngineeringAssistantServer).UploadCSV(ctx, req.(*UploadCSVRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataEngineeringAssistant_UploadJSON_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadJSONRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataEngineeringAssistantServer).UploadJSON(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataEngineeringAssistant_UploadJSON_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataEngineeringAssistantServer).UploadJSON(ctx, req.(*UploadJSONRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataEngineeringAssistant_UploadXML_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadXMLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataEngineeringAssistantServer).UploadXML(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataEngineeringAssistant_UploadXML_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataEngineeringAssistantServer).UploadXML(ctx, req.(*UploadXMLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataEngineeringAssistant_ConnectDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatabaseConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataEngineeringAssistantServer).ConnectDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataEngineeringAssistant_ConnectDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataEngineeringAssistantServer).ConnectDatabase(ctx, req.(*DatabaseConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataEngineeringAssistant_CreatePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataEngineeringAssistantServer).CreatePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataEngineeringAssistant_CreatePipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataEngineeringAssistantServer).CreatePipeline(ctx, req.(*CreatePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataEngineeringAssistant_GetPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataEngineeringAssistantServer).GetPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataEngineeringAssistant_GetPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataEngineeringAssistantServer).GetPipeline(ctx, req.(*GetPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataEngineeringAssistant_StartPostgresTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataEngineeringAssistantServer).StartPostgresTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataEngineeringAssistant_StartPostgresTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataEngineeringAssistantServer).StartPostgresTransfer(ctx, req.(*StartTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataEngineeringAssistant_StartClickHouseTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataEngineeringAssistantServer).StartClickHouseTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataEngineeringAssistant_StartClickHouseTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataEngineeringAssistantServer).StartClickHouseTransfer(ctx, req.(*StartTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataEngineeringAssistant_StartHDFSTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataEngineeringAssistantServer).StartHDFSTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataEngineeringAssistant_StartHDFSTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataEngineeringAssistantServer).StartHDFSTransfer(ctx, req.(*StartTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataEngineeringAssistant_GetTransferStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransferStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataEngineeringAssistantServer).GetTransferStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataEngineeringAssistant_GetTransferStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataEngineeringAssistantServer).GetTransferStatus(ctx, req.(*GetTransferStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataEngineeringAssistant_CancelTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataEngineeringAssistantServer).CancelTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataEngineeringAssistant_CancelTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataEngineeringAssistantServer).CancelTransfer(ctx, req.(*CancelTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataEngineeringAssistant_ServiceDesc is the grpc.ServiceDesc for DataEngineeringAssistant service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataEngineeringAssistant_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gateway.DataEngineeringAssistant",
	HandlerType: (*DataEngineeringAssistantServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadCSV",
			Handler:    _DataEngineeringAssistant_UploadCSV_Handler,
		},
		{
			MethodName: "UploadJSON",
			Handler:    _DataEngineeringAssistant_UploadJSON_Handler,
		},
		{
			MethodName: "UploadXML",
			Handler:    _DataEngineeringAssistant_UploadXML_Handler,
		},
		{
			MethodName: "ConnectDatabase",
			Handler:    _DataEngineeringAssistant_ConnectDatabase_Handler,
		},
		{
			MethodName: "CreatePipeline",
			Handler:    _DataEngineeringAssistant_CreatePipeline_Handler,
		},
		{
			MethodName: "GetPipeline",
			Handler:    _DataEngineeringAssistant_GetPipeline_Handler,
		},
		{
			MethodName: "StartPostgresTransfer",
			Handler:    _DataEngineeringAssistant_StartPostgresTransfer_Handler,
		},
		{
			MethodName: "StartClickHouseTransfer",
			Handler:    _DataEngineeringAssistant_StartClickHouseTransfer_Handler,
		},
		{
			MethodName: "StartHDFSTransfer",
			Handler:    _DataEngineeringAssistant_StartHDFSTransfer_Handler,
		},
		{
			MethodName: "GetTransferStatus",
			Handler:    _DataEngineeringAssistant_GetTransferStatus_Handler,
		},
		{
			MethodName: "CancelTransfer",
			Handler:    _DataEngineeringAssistant_CancelTransfer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ateway.proto",
}
