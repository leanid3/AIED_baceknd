// proto/gateway.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.1
// source: ateway.proto

package gen

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Загрузка CSV файла
type UploadCSVRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // Файл передается через multipart/form-data
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadCSVRequest) Reset() {
	*x = UploadCSVRequest{}
	mi := &file_ateway_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadCSVRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadCSVRequest) ProtoMessage() {}

func (x *UploadCSVRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ateway_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadCSVRequest.ProtoReflect.Descriptor instead.
func (*UploadCSVRequest) Descriptor() ([]byte, []int) {
	return file_ateway_proto_rawDescGZIP(), []int{0}
}

func (x *UploadCSVRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// Загрузка JSON файла
type UploadJSONRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // Файл передается через multipart/form-data
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadJSONRequest) Reset() {
	*x = UploadJSONRequest{}
	mi := &file_ateway_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadJSONRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadJSONRequest) ProtoMessage() {}

func (x *UploadJSONRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ateway_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadJSONRequest.ProtoReflect.Descriptor instead.
func (*UploadJSONRequest) Descriptor() ([]byte, []int) {
	return file_ateway_proto_rawDescGZIP(), []int{1}
}

func (x *UploadJSONRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// Загрузка XML файла
type UploadXMLRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // Файл передается через multipart/form-data
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadXMLRequest) Reset() {
	*x = UploadXMLRequest{}
	mi := &file_ateway_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadXMLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadXMLRequest) ProtoMessage() {}

func (x *UploadXMLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ateway_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadXMLRequest.ProtoReflect.Descriptor instead.
func (*UploadXMLRequest) Descriptor() ([]byte, []int) {
	return file_ateway_proto_rawDescGZIP(), []int{2}
}

func (x *UploadXMLRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// Подключение к базе данных
type DatabaseConnectionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DatabaseType  string                 `protobuf:"bytes,2,opt,name=database_type,json=databaseType,proto3" json:"database_type,omitempty"` // "postgres", "mysql", "oracle", "sqlserver"
	Host          string                 `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	Port          int32                  `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	Database      string                 `protobuf:"bytes,5,opt,name=database,proto3" json:"database,omitempty"`
	Username      string                 `protobuf:"bytes,6,opt,name=username,proto3" json:"username,omitempty"`
	Password      string                 `protobuf:"bytes,7,opt,name=password,proto3" json:"password,omitempty"`
	TableName     string                 `protobuf:"bytes,8,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"` // опционально, для анализа конкретной таблицы
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseConnectionRequest) Reset() {
	*x = DatabaseConnectionRequest{}
	mi := &file_ateway_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseConnectionRequest) ProtoMessage() {}

func (x *DatabaseConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ateway_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseConnectionRequest.ProtoReflect.Descriptor instead.
func (*DatabaseConnectionRequest) Descriptor() ([]byte, []int) {
	return file_ateway_proto_rawDescGZIP(), []int{3}
}

func (x *DatabaseConnectionRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DatabaseConnectionRequest) GetDatabaseType() string {
	if x != nil {
		return x.DatabaseType
	}
	return ""
}

func (x *DatabaseConnectionRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *DatabaseConnectionRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *DatabaseConnectionRequest) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *DatabaseConnectionRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *DatabaseConnectionRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *DatabaseConnectionRequest) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

type DatabaseConnectionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ConnectionId  string                 `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	Status        string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"` // "connected", "failed"
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	DataProfile   *UnifiedDataProfile    `protobuf:"bytes,4,opt,name=data_profile,json=dataProfile,proto3" json:"data_profile,omitempty"` // профиль данных из БД
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseConnectionResponse) Reset() {
	*x = DatabaseConnectionResponse{}
	mi := &file_ateway_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseConnectionResponse) ProtoMessage() {}

func (x *DatabaseConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ateway_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseConnectionResponse.ProtoReflect.Descriptor instead.
func (*DatabaseConnectionResponse) Descriptor() ([]byte, []int) {
	return file_ateway_proto_rawDescGZIP(), []int{4}
}

func (x *DatabaseConnectionResponse) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *DatabaseConnectionResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DatabaseConnectionResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DatabaseConnectionResponse) GetDataProfile() *UnifiedDataProfile {
	if x != nil {
		return x.DataProfile
	}
	return nil
}

type UploadFileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileId        string                 `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	Status        string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"` // "uploaded", "failed"
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadFileResponse) Reset() {
	*x = UploadFileResponse{}
	mi := &file_ateway_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadFileResponse) ProtoMessage() {}

func (x *UploadFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ateway_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadFileResponse.ProtoReflect.Descriptor instead.
func (*UploadFileResponse) Descriptor() ([]byte, []int) {
	return file_ateway_proto_rawDescGZIP(), []int{5}
}

func (x *UploadFileResponse) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *UploadFileResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *UploadFileResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CreatePipelineRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Source        *DataSource            `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Target        *DataTarget            `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	UserId        string                 `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // для аудита
	FileId        string                 `protobuf:"bytes,4,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"` // опционально, если используется загруженный файл
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreatePipelineRequest) Reset() {
	*x = CreatePipelineRequest{}
	mi := &file_ateway_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePipelineRequest) ProtoMessage() {}

func (x *CreatePipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ateway_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePipelineRequest.ProtoReflect.Descriptor instead.
func (*CreatePipelineRequest) Descriptor() ([]byte, []int) {
	return file_ateway_proto_rawDescGZIP(), []int{6}
}

func (x *CreatePipelineRequest) GetSource() *DataSource {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *CreatePipelineRequest) GetTarget() *DataTarget {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *CreatePipelineRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreatePipelineRequest) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

type DataSource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*DataSource_File
	//	*DataSource_Db
	//	*DataSource_Stream
	Type             isDataSource_Type `protobuf_oneof:"type"`
	ConnectionString string            `protobuf:"bytes,4,opt,name=connection_string,json=connectionString,proto3" json:"connection_string,omitempty"` // опционально, для БД/Kafka
	CredentialsRef   string            `protobuf:"bytes,5,opt,name=credentials_ref,json=credentialsRef,proto3" json:"credentials_ref,omitempty"`       // ссылка на секрет (Vault/K8s)
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *DataSource) Reset() {
	*x = DataSource{}
	mi := &file_ateway_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSource) ProtoMessage() {}

func (x *DataSource) ProtoReflect() protoreflect.Message {
	mi := &file_ateway_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSource.ProtoReflect.Descriptor instead.
func (*DataSource) Descriptor() ([]byte, []int) {
	return file_ateway_proto_rawDescGZIP(), []int{7}
}

func (x *DataSource) GetType() isDataSource_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *DataSource) GetFile() *FileSource {
	if x != nil {
		if x, ok := x.Type.(*DataSource_File); ok {
			return x.File
		}
	}
	return nil
}

func (x *DataSource) GetDb() *DatabaseSource {
	if x != nil {
		if x, ok := x.Type.(*DataSource_Db); ok {
			return x.Db
		}
	}
	return nil
}

func (x *DataSource) GetStream() *StreamSource {
	if x != nil {
		if x, ok := x.Type.(*DataSource_Stream); ok {
			return x.Stream
		}
	}
	return nil
}

func (x *DataSource) GetConnectionString() string {
	if x != nil {
		return x.ConnectionString
	}
	return ""
}

func (x *DataSource) GetCredentialsRef() string {
	if x != nil {
		return x.CredentialsRef
	}
	return ""
}

type isDataSource_Type interface {
	isDataSource_Type()
}

type DataSource_File struct {
	File *FileSource `protobuf:"bytes,1,opt,name=file,proto3,oneof"`
}

type DataSource_Db struct {
	Db *DatabaseSource `protobuf:"bytes,2,opt,name=db,proto3,oneof"`
}

type DataSource_Stream struct {
	Stream *StreamSource `protobuf:"bytes,3,opt,name=stream,proto3,oneof"`
}

func (*DataSource_File) isDataSource_Type() {}

func (*DataSource_Db) isDataSource_Type() {}

func (*DataSource_Stream) isDataSource_Type() {}

type FileSource struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Format        string                 `protobuf:"bytes,1,opt,name=format,proto3" json:"format,omitempty"` // "csv", "json", "xml"
	Url           string                 `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`       // URL файла или временный upload ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileSource) Reset() {
	*x = FileSource{}
	mi := &file_ateway_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileSource) ProtoMessage() {}

func (x *FileSource) ProtoReflect() protoreflect.Message {
	mi := &file_ateway_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileSource.ProtoReflect.Descriptor instead.
func (*FileSource) Descriptor() ([]byte, []int) {
	return file_ateway_proto_rawDescGZIP(), []int{8}
}

func (x *FileSource) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *FileSource) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type DatabaseSource struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"` // "postgres", "clickhouse"
	Host          string                 `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Port          int32                  `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	Database      string                 `protobuf:"bytes,4,opt,name=database,proto3" json:"database,omitempty"`
	Table         string                 `protobuf:"bytes,5,opt,name=table,proto3" json:"table,omitempty"`
	Username      string                 `protobuf:"bytes,6,opt,name=username,proto3" json:"username,omitempty"`
	Password      string                 `protobuf:"bytes,7,opt,name=password,proto3" json:"password,omitempty"` // ⚠️ в реальности — только через credentials_ref!
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseSource) Reset() {
	*x = DatabaseSource{}
	mi := &file_ateway_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseSource) ProtoMessage() {}

func (x *DatabaseSource) ProtoReflect() protoreflect.Message {
	mi := &file_ateway_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseSource.ProtoReflect.Descriptor instead.
func (*DatabaseSource) Descriptor() ([]byte, []int) {
	return file_ateway_proto_rawDescGZIP(), []int{9}
}

func (x *DatabaseSource) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DatabaseSource) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *DatabaseSource) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *DatabaseSource) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *DatabaseSource) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *DatabaseSource) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *DatabaseSource) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type StreamSource struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Type             string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"` // "kafka"
	Topic            string                 `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	BootstrapServers string                 `protobuf:"bytes,3,opt,name=bootstrap_servers,json=bootstrapServers,proto3" json:"bootstrap_servers,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *StreamSource) Reset() {
	*x = StreamSource{}
	mi := &file_ateway_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamSource) ProtoMessage() {}

func (x *StreamSource) ProtoReflect() protoreflect.Message {
	mi := &file_ateway_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamSource.ProtoReflect.Descriptor instead.
func (*StreamSource) Descriptor() ([]byte, []int) {
	return file_ateway_proto_rawDescGZIP(), []int{10}
}

func (x *StreamSource) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *StreamSource) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *StreamSource) GetBootstrapServers() string {
	if x != nil {
		return x.BootstrapServers
	}
	return ""
}

type DataTarget struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Type             string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"` // "postgres", "clickhouse", "hdfs"
	ConnectionString string                 `protobuf:"bytes,2,opt,name=connection_string,json=connectionString,proto3" json:"connection_string,omitempty"`
	TableName        string                 `protobuf:"bytes,3,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	CredentialsRef   string                 `protobuf:"bytes,4,opt,name=credentials_ref,json=credentialsRef,proto3" json:"credentials_ref,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *DataTarget) Reset() {
	*x = DataTarget{}
	mi := &file_ateway_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataTarget) ProtoMessage() {}

func (x *DataTarget) ProtoReflect() protoreflect.Message {
	mi := &file_ateway_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataTarget.ProtoReflect.Descriptor instead.
func (*DataTarget) Descriptor() ([]byte, []int) {
	return file_ateway_proto_rawDescGZIP(), []int{11}
}

func (x *DataTarget) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DataTarget) GetConnectionString() string {
	if x != nil {
		return x.ConnectionString
	}
	return ""
}

func (x *DataTarget) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *DataTarget) GetCredentialsRef() string {
	if x != nil {
		return x.CredentialsRef
	}
	return ""
}

// Запрос на запуск переноса данных
type StartTransferRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	PipelineId       string                 `protobuf:"bytes,1,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`                                                   // ID созданного пайплайна
	UserId           string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                                               // ID пользователя
	TargetType       string                 `protobuf:"bytes,3,opt,name=target_type,json=targetType,proto3" json:"target_type,omitempty"`                                                   // "postgres", "clickhouse", "hdfs"
	TargetConnection string                 `protobuf:"bytes,4,opt,name=target_connection,json=targetConnection,proto3" json:"target_connection,omitempty"`                                 // строка подключения к целевой системе
	TargetTable      string                 `protobuf:"bytes,5,opt,name=target_table,json=targetTable,proto3" json:"target_table,omitempty"`                                                // имя таблицы/путь в целевой системе
	Options          map[string]string      `protobuf:"bytes,6,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // дополнительные опции переноса
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *StartTransferRequest) Reset() {
	*x = StartTransferRequest{}
	mi := &file_ateway_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTransferRequest) ProtoMessage() {}

func (x *StartTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ateway_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTransferRequest.ProtoReflect.Descriptor instead.
func (*StartTransferRequest) Descriptor() ([]byte, []int) {
	return file_ateway_proto_rawDescGZIP(), []int{12}
}

func (x *StartTransferRequest) GetPipelineId() string {
	if x != nil {
		return x.PipelineId
	}
	return ""
}

func (x *StartTransferRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *StartTransferRequest) GetTargetType() string {
	if x != nil {
		return x.TargetType
	}
	return ""
}

func (x *StartTransferRequest) GetTargetConnection() string {
	if x != nil {
		return x.TargetConnection
	}
	return ""
}

func (x *StartTransferRequest) GetTargetTable() string {
	if x != nil {
		return x.TargetTable
	}
	return ""
}

func (x *StartTransferRequest) GetOptions() map[string]string {
	if x != nil {
		return x.Options
	}
	return nil
}

// Ответ на запуск переноса
type StartTransferResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	TransferId        string                 `protobuf:"bytes,1,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`
	Status            string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"` // "started", "failed"
	Message           string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	EstimatedDuration int64                  `protobuf:"varint,4,opt,name=estimated_duration,json=estimatedDuration,proto3" json:"estimated_duration,omitempty"` // примерная длительность в секундах
	EstimatedSize     int64                  `protobuf:"varint,5,opt,name=estimated_size,json=estimatedSize,proto3" json:"estimated_size,omitempty"`             // примерный размер данных в байтах
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *StartTransferResponse) Reset() {
	*x = StartTransferResponse{}
	mi := &file_ateway_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartTransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTransferResponse) ProtoMessage() {}

func (x *StartTransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ateway_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTransferResponse.ProtoReflect.Descriptor instead.
func (*StartTransferResponse) Descriptor() ([]byte, []int) {
	return file_ateway_proto_rawDescGZIP(), []int{13}
}

func (x *StartTransferResponse) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *StartTransferResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *StartTransferResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *StartTransferResponse) GetEstimatedDuration() int64 {
	if x != nil {
		return x.EstimatedDuration
	}
	return 0
}

func (x *StartTransferResponse) GetEstimatedSize() int64 {
	if x != nil {
		return x.EstimatedSize
	}
	return 0
}

// Запрос статуса переноса
type GetTransferStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TransferId    string                 `protobuf:"bytes,1,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTransferStatusRequest) Reset() {
	*x = GetTransferStatusRequest{}
	mi := &file_ateway_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransferStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransferStatusRequest) ProtoMessage() {}

func (x *GetTransferStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ateway_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransferStatusRequest.ProtoReflect.Descriptor instead.
func (*GetTransferStatusRequest) Descriptor() ([]byte, []int) {
	return file_ateway_proto_rawDescGZIP(), []int{14}
}

func (x *GetTransferStatusRequest) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

// Ответ со статусом переноса
type GetTransferStatusResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TransferId      string                 `protobuf:"bytes,1,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`
	Status          string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"` // "pending", "running", "completed", "failed", "cancelled"
	Message         string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	ProgressPercent int32                  `protobuf:"varint,4,opt,name=progress_percent,json=progressPercent,proto3" json:"progress_percent,omitempty"`                                      // прогресс в процентах
	ProcessedRows   int64                  `protobuf:"varint,5,opt,name=processed_rows,json=processedRows,proto3" json:"processed_rows,omitempty"`                                            // количество обработанных строк
	TotalRows       int64                  `protobuf:"varint,6,opt,name=total_rows,json=totalRows,proto3" json:"total_rows,omitempty"`                                                        // общее количество строк
	ProcessedBytes  int64                  `protobuf:"varint,7,opt,name=processed_bytes,json=processedBytes,proto3" json:"processed_bytes,omitempty"`                                         // количество обработанных байт
	TotalBytes      int64                  `protobuf:"varint,8,opt,name=total_bytes,json=totalBytes,proto3" json:"total_bytes,omitempty"`                                                     // общий размер данных
	StartedAt       string                 `protobuf:"bytes,9,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`                                                         // время начала
	CompletedAt     string                 `protobuf:"bytes,10,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`                                                  // время завершения
	ErrorMessage    string                 `protobuf:"bytes,11,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`                                               // сообщение об ошибке
	Metadata        map[string]string      `protobuf:"bytes,12,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // дополнительная информация
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetTransferStatusResponse) Reset() {
	*x = GetTransferStatusResponse{}
	mi := &file_ateway_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransferStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransferStatusResponse) ProtoMessage() {}

func (x *GetTransferStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ateway_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransferStatusResponse.ProtoReflect.Descriptor instead.
func (*GetTransferStatusResponse) Descriptor() ([]byte, []int) {
	return file_ateway_proto_rawDescGZIP(), []int{15}
}

func (x *GetTransferStatusResponse) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *GetTransferStatusResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetTransferStatusResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetTransferStatusResponse) GetProgressPercent() int32 {
	if x != nil {
		return x.ProgressPercent
	}
	return 0
}

func (x *GetTransferStatusResponse) GetProcessedRows() int64 {
	if x != nil {
		return x.ProcessedRows
	}
	return 0
}

func (x *GetTransferStatusResponse) GetTotalRows() int64 {
	if x != nil {
		return x.TotalRows
	}
	return 0
}

func (x *GetTransferStatusResponse) GetProcessedBytes() int64 {
	if x != nil {
		return x.ProcessedBytes
	}
	return 0
}

func (x *GetTransferStatusResponse) GetTotalBytes() int64 {
	if x != nil {
		return x.TotalBytes
	}
	return 0
}

func (x *GetTransferStatusResponse) GetStartedAt() string {
	if x != nil {
		return x.StartedAt
	}
	return ""
}

func (x *GetTransferStatusResponse) GetCompletedAt() string {
	if x != nil {
		return x.CompletedAt
	}
	return ""
}

func (x *GetTransferStatusResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *GetTransferStatusResponse) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Запрос отмены переноса
type CancelTransferRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TransferId    string                 `protobuf:"bytes,1,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelTransferRequest) Reset() {
	*x = CancelTransferRequest{}
	mi := &file_ateway_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelTransferRequest) ProtoMessage() {}

func (x *CancelTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ateway_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelTransferRequest.ProtoReflect.Descriptor instead.
func (*CancelTransferRequest) Descriptor() ([]byte, []int) {
	return file_ateway_proto_rawDescGZIP(), []int{16}
}

func (x *CancelTransferRequest) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *CancelTransferRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// Ответ на отмену переноса
type CancelTransferResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TransferId    string                 `protobuf:"bytes,1,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`
	Status        string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"` // "cancelled", "not_found"
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelTransferResponse) Reset() {
	*x = CancelTransferResponse{}
	mi := &file_ateway_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelTransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelTransferResponse) ProtoMessage() {}

func (x *CancelTransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ateway_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelTransferResponse.ProtoReflect.Descriptor instead.
func (*CancelTransferResponse) Descriptor() ([]byte, []int) {
	return file_ateway_proto_rawDescGZIP(), []int{17}
}

func (x *CancelTransferResponse) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *CancelTransferResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CancelTransferResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CreatePipelineResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PipelineId    string                 `protobuf:"bytes,1,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`
	Status        string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`           // "created", "failed"
	Explanation   string                 `protobuf:"bytes,3,opt,name=explanation,proto3" json:"explanation,omitempty"` // от LLM: "Я вижу, что данные временные..."
	DdlScript     string                 `protobuf:"bytes,4,opt,name=ddl_script,json=ddlScript,proto3" json:"ddl_script,omitempty"`
	DagYaml       string                 `protobuf:"bytes,5,opt,name=dag_yaml,json=dagYaml,proto3" json:"dag_yaml,omitempty"`             // сгенерированный Airflow DAG
	Visualization string                 `protobuf:"bytes,6,opt,name=visualization,proto3" json:"visualization,omitempty"`                // Mermaid или JSON для UI
	DataProfile   *UnifiedDataProfile    `protobuf:"bytes,7,opt,name=data_profile,json=dataProfile,proto3" json:"data_profile,omitempty"` // профиль данных в едином формате
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreatePipelineResponse) Reset() {
	*x = CreatePipelineResponse{}
	mi := &file_ateway_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePipelineResponse) ProtoMessage() {}

func (x *CreatePipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ateway_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePipelineResponse.ProtoReflect.Descriptor instead.
func (*CreatePipelineResponse) Descriptor() ([]byte, []int) {
	return file_ateway_proto_rawDescGZIP(), []int{18}
}

func (x *CreatePipelineResponse) GetPipelineId() string {
	if x != nil {
		return x.PipelineId
	}
	return ""
}

func (x *CreatePipelineResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CreatePipelineResponse) GetExplanation() string {
	if x != nil {
		return x.Explanation
	}
	return ""
}

func (x *CreatePipelineResponse) GetDdlScript() string {
	if x != nil {
		return x.DdlScript
	}
	return ""
}

func (x *CreatePipelineResponse) GetDagYaml() string {
	if x != nil {
		return x.DagYaml
	}
	return ""
}

func (x *CreatePipelineResponse) GetVisualization() string {
	if x != nil {
		return x.Visualization
	}
	return ""
}

func (x *CreatePipelineResponse) GetDataProfile() *UnifiedDataProfile {
	if x != nil {
		return x.DataProfile
	}
	return nil
}

// Единый формат данных для передачи в LLM
type UnifiedDataProfile struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	DataType         string                 `protobuf:"bytes,1,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"` // "timeseries", "transactional", "log", "unknown"
	TotalRows        int32                  `protobuf:"varint,2,opt,name=total_rows,json=totalRows,proto3" json:"total_rows,omitempty"`
	SampledRows      int32                  `protobuf:"varint,3,opt,name=sampled_rows,json=sampledRows,proto3" json:"sampled_rows,omitempty"`
	Fields           []*UnifiedField        `protobuf:"bytes,4,rep,name=fields,proto3" json:"fields,omitempty"`
	SampleData       string                 `protobuf:"bytes,5,opt,name=sample_data,json=sampleData,proto3" json:"sample_data,omitempty"`                     // JSON с примерами данных
	DataQualityScore string                 `protobuf:"bytes,6,opt,name=data_quality_score,json=dataQualityScore,proto3" json:"data_quality_score,omitempty"` // оценка качества данных
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *UnifiedDataProfile) Reset() {
	*x = UnifiedDataProfile{}
	mi := &file_ateway_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnifiedDataProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnifiedDataProfile) ProtoMessage() {}

func (x *UnifiedDataProfile) ProtoReflect() protoreflect.Message {
	mi := &file_ateway_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnifiedDataProfile.ProtoReflect.Descriptor instead.
func (*UnifiedDataProfile) Descriptor() ([]byte, []int) {
	return file_ateway_proto_rawDescGZIP(), []int{19}
}

func (x *UnifiedDataProfile) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *UnifiedDataProfile) GetTotalRows() int32 {
	if x != nil {
		return x.TotalRows
	}
	return 0
}

func (x *UnifiedDataProfile) GetSampledRows() int32 {
	if x != nil {
		return x.SampledRows
	}
	return 0
}

func (x *UnifiedDataProfile) GetFields() []*UnifiedField {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *UnifiedDataProfile) GetSampleData() string {
	if x != nil {
		return x.SampleData
	}
	return ""
}

func (x *UnifiedDataProfile) GetDataQualityScore() string {
	if x != nil {
		return x.DataQualityScore
	}
	return ""
}

type UnifiedField struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type          string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"` // "string", "int", "float", "datetime", "bool", "json"
	Nullable      bool                   `protobuf:"varint,3,opt,name=nullable,proto3" json:"nullable,omitempty"`
	NullCount     int32                  `protobuf:"varint,4,opt,name=null_count,json=nullCount,proto3" json:"null_count,omitempty"`
	SampleValue   string                 `protobuf:"bytes,5,opt,name=sample_value,json=sampleValue,proto3" json:"sample_value,omitempty"`
	MinValue      float64                `protobuf:"fixed64,6,opt,name=min_value,json=minValue,proto3" json:"min_value,omitempty"`
	MaxValue      float64                `protobuf:"fixed64,7,opt,name=max_value,json=maxValue,proto3" json:"max_value,omitempty"`
	Description   string                 `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"` // описание поля от LLM
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnifiedField) Reset() {
	*x = UnifiedField{}
	mi := &file_ateway_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnifiedField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnifiedField) ProtoMessage() {}

func (x *UnifiedField) ProtoReflect() protoreflect.Message {
	mi := &file_ateway_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnifiedField.ProtoReflect.Descriptor instead.
func (*UnifiedField) Descriptor() ([]byte, []int) {
	return file_ateway_proto_rawDescGZIP(), []int{20}
}

func (x *UnifiedField) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UnifiedField) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UnifiedField) GetNullable() bool {
	if x != nil {
		return x.Nullable
	}
	return false
}

func (x *UnifiedField) GetNullCount() int32 {
	if x != nil {
		return x.NullCount
	}
	return 0
}

func (x *UnifiedField) GetSampleValue() string {
	if x != nil {
		return x.SampleValue
	}
	return ""
}

func (x *UnifiedField) GetMinValue() float64 {
	if x != nil {
		return x.MinValue
	}
	return 0
}

func (x *UnifiedField) GetMaxValue() float64 {
	if x != nil {
		return x.MaxValue
	}
	return 0
}

func (x *UnifiedField) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type GetPipelineRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PipelineId    string                 `protobuf:"bytes,1,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPipelineRequest) Reset() {
	*x = GetPipelineRequest{}
	mi := &file_ateway_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPipelineRequest) ProtoMessage() {}

func (x *GetPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ateway_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPipelineRequest.ProtoReflect.Descriptor instead.
func (*GetPipelineRequest) Descriptor() ([]byte, []int) {
	return file_ateway_proto_rawDescGZIP(), []int{21}
}

func (x *GetPipelineRequest) GetPipelineId() string {
	if x != nil {
		return x.PipelineId
	}
	return ""
}

type PipelineDetails struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PipelineId    string                 `protobuf:"bytes,1,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`
	Status        string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	DagYaml       string                 `protobuf:"bytes,3,opt,name=dag_yaml,json=dagYaml,proto3" json:"dag_yaml,omitempty"`
	LastRunStatus string                 `protobuf:"bytes,4,opt,name=last_run_status,json=lastRunStatus,proto3" json:"last_run_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PipelineDetails) Reset() {
	*x = PipelineDetails{}
	mi := &file_ateway_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PipelineDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineDetails) ProtoMessage() {}

func (x *PipelineDetails) ProtoReflect() protoreflect.Message {
	mi := &file_ateway_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineDetails.ProtoReflect.Descriptor instead.
func (*PipelineDetails) Descriptor() ([]byte, []int) {
	return file_ateway_proto_rawDescGZIP(), []int{22}
}

func (x *PipelineDetails) GetPipelineId() string {
	if x != nil {
		return x.PipelineId
	}
	return ""
}

func (x *PipelineDetails) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PipelineDetails) GetDagYaml() string {
	if x != nil {
		return x.DagYaml
	}
	return ""
}

func (x *PipelineDetails) GetLastRunStatus() string {
	if x != nil {
		return x.LastRunStatus
	}
	return ""
}

var File_ateway_proto protoreflect.FileDescriptor

const file_ateway_proto_rawDesc = "" +
	"\n" +
	"\fateway.proto\x12\agateway\x1a\x1cgoogle/api/annotations.proto\"+\n" +
	"\x10UploadCSVRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\",\n" +
	"\x11UploadJSONRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\"+\n" +
	"\x10UploadXMLRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\"\xf4\x01\n" +
	"\x19DatabaseConnectionRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12#\n" +
	"\rdatabase_type\x18\x02 \x01(\tR\fdatabaseType\x12\x12\n" +
	"\x04host\x18\x03 \x01(\tR\x04host\x12\x12\n" +
	"\x04port\x18\x04 \x01(\x05R\x04port\x12\x1a\n" +
	"\bdatabase\x18\x05 \x01(\tR\bdatabase\x12\x1a\n" +
	"\busername\x18\x06 \x01(\tR\busername\x12\x1a\n" +
	"\bpassword\x18\a \x01(\tR\bpassword\x12\x1d\n" +
	"\n" +
	"table_name\x18\b \x01(\tR\ttableName\"\xb3\x01\n" +
	"\x1aDatabaseConnectionResponse\x12#\n" +
	"\rconnection_id\x18\x01 \x01(\tR\fconnectionId\x12\x16\n" +
	"\x06status\x18\x02 \x01(\tR\x06status\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\x12>\n" +
	"\fdata_profile\x18\x04 \x01(\v2\x1b.gateway.UnifiedDataProfileR\vdataProfile\"_\n" +
	"\x12UploadFileResponse\x12\x17\n" +
	"\afile_id\x18\x01 \x01(\tR\x06fileId\x12\x16\n" +
	"\x06status\x18\x02 \x01(\tR\x06status\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\"\xa3\x01\n" +
	"\x15CreatePipelineRequest\x12+\n" +
	"\x06source\x18\x01 \x01(\v2\x13.gateway.DataSourceR\x06source\x12+\n" +
	"\x06target\x18\x02 \x01(\v2\x13.gateway.DataTargetR\x06target\x12\x17\n" +
	"\auser_id\x18\x03 \x01(\tR\x06userId\x12\x17\n" +
	"\afile_id\x18\x04 \x01(\tR\x06fileId\"\xf1\x01\n" +
	"\n" +
	"DataSource\x12)\n" +
	"\x04file\x18\x01 \x01(\v2\x13.gateway.FileSourceH\x00R\x04file\x12)\n" +
	"\x02db\x18\x02 \x01(\v2\x17.gateway.DatabaseSourceH\x00R\x02db\x12/\n" +
	"\x06stream\x18\x03 \x01(\v2\x15.gateway.StreamSourceH\x00R\x06stream\x12+\n" +
	"\x11connection_string\x18\x04 \x01(\tR\x10connectionString\x12'\n" +
	"\x0fcredentials_ref\x18\x05 \x01(\tR\x0ecredentialsRefB\x06\n" +
	"\x04type\"6\n" +
	"\n" +
	"FileSource\x12\x16\n" +
	"\x06format\x18\x01 \x01(\tR\x06format\x12\x10\n" +
	"\x03url\x18\x02 \x01(\tR\x03url\"\xb6\x01\n" +
	"\x0eDatabaseSource\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12\x12\n" +
	"\x04host\x18\x02 \x01(\tR\x04host\x12\x12\n" +
	"\x04port\x18\x03 \x01(\x05R\x04port\x12\x1a\n" +
	"\bdatabase\x18\x04 \x01(\tR\bdatabase\x12\x14\n" +
	"\x05table\x18\x05 \x01(\tR\x05table\x12\x1a\n" +
	"\busername\x18\x06 \x01(\tR\busername\x12\x1a\n" +
	"\bpassword\x18\a \x01(\tR\bpassword\"e\n" +
	"\fStreamSource\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12\x14\n" +
	"\x05topic\x18\x02 \x01(\tR\x05topic\x12+\n" +
	"\x11bootstrap_servers\x18\x03 \x01(\tR\x10bootstrapServers\"\x95\x01\n" +
	"\n" +
	"DataTarget\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12+\n" +
	"\x11connection_string\x18\x02 \x01(\tR\x10connectionString\x12\x1d\n" +
	"\n" +
	"table_name\x18\x03 \x01(\tR\ttableName\x12'\n" +
	"\x0fcredentials_ref\x18\x04 \x01(\tR\x0ecredentialsRef\"\xc3\x02\n" +
	"\x14StartTransferRequest\x12\x1f\n" +
	"\vpipeline_id\x18\x01 \x01(\tR\n" +
	"pipelineId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12\x1f\n" +
	"\vtarget_type\x18\x03 \x01(\tR\n" +
	"targetType\x12+\n" +
	"\x11target_connection\x18\x04 \x01(\tR\x10targetConnection\x12!\n" +
	"\ftarget_table\x18\x05 \x01(\tR\vtargetTable\x12D\n" +
	"\aoptions\x18\x06 \x03(\v2*.gateway.StartTransferRequest.OptionsEntryR\aoptions\x1a:\n" +
	"\fOptionsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xc0\x01\n" +
	"\x15StartTransferResponse\x12\x1f\n" +
	"\vtransfer_id\x18\x01 \x01(\tR\n" +
	"transferId\x12\x16\n" +
	"\x06status\x18\x02 \x01(\tR\x06status\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\x12-\n" +
	"\x12estimated_duration\x18\x04 \x01(\x03R\x11estimatedDuration\x12%\n" +
	"\x0eestimated_size\x18\x05 \x01(\x03R\restimatedSize\";\n" +
	"\x18GetTransferStatusRequest\x12\x1f\n" +
	"\vtransfer_id\x18\x01 \x01(\tR\n" +
	"transferId\"\x9b\x04\n" +
	"\x19GetTransferStatusResponse\x12\x1f\n" +
	"\vtransfer_id\x18\x01 \x01(\tR\n" +
	"transferId\x12\x16\n" +
	"\x06status\x18\x02 \x01(\tR\x06status\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\x12)\n" +
	"\x10progress_percent\x18\x04 \x01(\x05R\x0fprogressPercent\x12%\n" +
	"\x0eprocessed_rows\x18\x05 \x01(\x03R\rprocessedRows\x12\x1d\n" +
	"\n" +
	"total_rows\x18\x06 \x01(\x03R\ttotalRows\x12'\n" +
	"\x0fprocessed_bytes\x18\a \x01(\x03R\x0eprocessedBytes\x12\x1f\n" +
	"\vtotal_bytes\x18\b \x01(\x03R\n" +
	"totalBytes\x12\x1d\n" +
	"\n" +
	"started_at\x18\t \x01(\tR\tstartedAt\x12!\n" +
	"\fcompleted_at\x18\n" +
	" \x01(\tR\vcompletedAt\x12#\n" +
	"\rerror_message\x18\v \x01(\tR\ferrorMessage\x12L\n" +
	"\bmetadata\x18\f \x03(\v20.gateway.GetTransferStatusResponse.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"Q\n" +
	"\x15CancelTransferRequest\x12\x1f\n" +
	"\vtransfer_id\x18\x01 \x01(\tR\n" +
	"transferId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\"k\n" +
	"\x16CancelTransferResponse\x12\x1f\n" +
	"\vtransfer_id\x18\x01 \x01(\tR\n" +
	"transferId\x12\x16\n" +
	"\x06status\x18\x02 \x01(\tR\x06status\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\"\x93\x02\n" +
	"\x16CreatePipelineResponse\x12\x1f\n" +
	"\vpipeline_id\x18\x01 \x01(\tR\n" +
	"pipelineId\x12\x16\n" +
	"\x06status\x18\x02 \x01(\tR\x06status\x12 \n" +
	"\vexplanation\x18\x03 \x01(\tR\vexplanation\x12\x1d\n" +
	"\n" +
	"ddl_script\x18\x04 \x01(\tR\tddlScript\x12\x19\n" +
	"\bdag_yaml\x18\x05 \x01(\tR\adagYaml\x12$\n" +
	"\rvisualization\x18\x06 \x01(\tR\rvisualization\x12>\n" +
	"\fdata_profile\x18\a \x01(\v2\x1b.gateway.UnifiedDataProfileR\vdataProfile\"\xf1\x01\n" +
	"\x12UnifiedDataProfile\x12\x1b\n" +
	"\tdata_type\x18\x01 \x01(\tR\bdataType\x12\x1d\n" +
	"\n" +
	"total_rows\x18\x02 \x01(\x05R\ttotalRows\x12!\n" +
	"\fsampled_rows\x18\x03 \x01(\x05R\vsampledRows\x12-\n" +
	"\x06fields\x18\x04 \x03(\v2\x15.gateway.UnifiedFieldR\x06fields\x12\x1f\n" +
	"\vsample_data\x18\x05 \x01(\tR\n" +
	"sampleData\x12,\n" +
	"\x12data_quality_score\x18\x06 \x01(\tR\x10dataQualityScore\"\xf0\x01\n" +
	"\fUnifiedField\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04type\x18\x02 \x01(\tR\x04type\x12\x1a\n" +
	"\bnullable\x18\x03 \x01(\bR\bnullable\x12\x1d\n" +
	"\n" +
	"null_count\x18\x04 \x01(\x05R\tnullCount\x12!\n" +
	"\fsample_value\x18\x05 \x01(\tR\vsampleValue\x12\x1b\n" +
	"\tmin_value\x18\x06 \x01(\x01R\bminValue\x12\x1b\n" +
	"\tmax_value\x18\a \x01(\x01R\bmaxValue\x12 \n" +
	"\vdescription\x18\b \x01(\tR\vdescription\"5\n" +
	"\x12GetPipelineRequest\x12\x1f\n" +
	"\vpipeline_id\x18\x01 \x01(\tR\n" +
	"pipelineId\"\x8d\x01\n" +
	"\x0fPipelineDetails\x12\x1f\n" +
	"\vpipeline_id\x18\x01 \x01(\tR\n" +
	"pipelineId\x12\x16\n" +
	"\x06status\x18\x02 \x01(\tR\x06status\x12\x19\n" +
	"\bdag_yaml\x18\x03 \x01(\tR\adagYaml\x12&\n" +
	"\x0flast_run_status\x18\x04 \x01(\tR\rlastRunStatus2\x89\n" +
	"\n" +
	"\x18DataEngineeringAssistant\x12d\n" +
	"\tUploadCSV\x12\x19.gateway.UploadCSVRequest\x1a\x1b.gateway.UploadFileResponse\"\x1f\x82\xd3\xe4\x93\x02\x19:\x01*\"\x14/v1/files/upload/csv\x12g\n" +
	"\n" +
	"UploadJSON\x12\x1a.gateway.UploadJSONRequest\x1a\x1b.gateway.UploadFileResponse\" \x82\xd3\xe4\x93\x02\x1a:\x01*\"\x15/v1/files/upload/json\x12d\n" +
	"\tUploadXML\x12\x19.gateway.UploadXMLRequest\x1a\x1b.gateway.UploadFileResponse\"\x1f\x82\xd3\xe4\x93\x02\x19:\x01*\"\x14/v1/files/upload/xml\x12{\n" +
	"\x0fConnectDatabase\x12\".gateway.DatabaseConnectionRequest\x1a#.gateway.DatabaseConnectionResponse\"\x1f\x82\xd3\xe4\x93\x02\x19:\x01*\"\x14/v1/database/connect\x12k\n" +
	"\x0eCreatePipeline\x12\x1e.gateway.CreatePipelineRequest\x1a\x1f.gateway.CreatePipelineResponse\"\x18\x82\xd3\xe4\x93\x02\x12:\x01*\"\r/v1/pipelines\x12i\n" +
	"\vGetPipeline\x12\x1b.gateway.GetPipelineRequest\x1a\x18.gateway.PipelineDetails\"#\x82\xd3\xe4\x93\x02\x1d\x12\x1b/v1/pipelines/{pipeline_id}\x12x\n" +
	"\x15StartPostgresTransfer\x12\x1d.gateway.StartTransferRequest\x1a\x1e.gateway.StartTransferResponse\" \x82\xd3\xe4\x93\x02\x1a:\x01*\"\x15/v1/transfer/postgres\x12|\n" +
	"\x17StartClickHouseTransfer\x12\x1d.gateway.StartTransferRequest\x1a\x1e.gateway.StartTransferResponse\"\"\x82\xd3\xe4\x93\x02\x1c:\x01*\"\x17/v1/transfer/clickhouse\x12p\n" +
	"\x11StartHDFSTransfer\x12\x1d.gateway.StartTransferRequest\x1a\x1e.gateway.StartTransferResponse\"\x1c\x82\xd3\xe4\x93\x02\x16:\x01*\"\x11/v1/transfer/hdfs\x12\x85\x01\n" +
	"\x11GetTransferStatus\x12!.gateway.GetTransferStatusRequest\x1a\".gateway.GetTransferStatusResponse\")\x82\xd3\xe4\x93\x02#\x12!/v1/transfer/status/{transfer_id}\x12q\n" +
	"\x0eCancelTransfer\x12\x1e.gateway.CancelTransferRequest\x1a\x1f.gateway.CancelTransferResponse\"\x1e\x82\xd3\xe4\x93\x02\x18:\x01*\"\x13/v1/transfer/cancelB\vZ\t./gen;genb\x06proto3"

var (
	file_ateway_proto_rawDescOnce sync.Once
	file_ateway_proto_rawDescData []byte
)

func file_ateway_proto_rawDescGZIP() []byte {
	file_ateway_proto_rawDescOnce.Do(func() {
		file_ateway_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ateway_proto_rawDesc), len(file_ateway_proto_rawDesc)))
	})
	return file_ateway_proto_rawDescData
}

var file_ateway_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_ateway_proto_goTypes = []any{
	(*UploadCSVRequest)(nil),           // 0: gateway.UploadCSVRequest
	(*UploadJSONRequest)(nil),          // 1: gateway.UploadJSONRequest
	(*UploadXMLRequest)(nil),           // 2: gateway.UploadXMLRequest
	(*DatabaseConnectionRequest)(nil),  // 3: gateway.DatabaseConnectionRequest
	(*DatabaseConnectionResponse)(nil), // 4: gateway.DatabaseConnectionResponse
	(*UploadFileResponse)(nil),         // 5: gateway.UploadFileResponse
	(*CreatePipelineRequest)(nil),      // 6: gateway.CreatePipelineRequest
	(*DataSource)(nil),                 // 7: gateway.DataSource
	(*FileSource)(nil),                 // 8: gateway.FileSource
	(*DatabaseSource)(nil),             // 9: gateway.DatabaseSource
	(*StreamSource)(nil),               // 10: gateway.StreamSource
	(*DataTarget)(nil),                 // 11: gateway.DataTarget
	(*StartTransferRequest)(nil),       // 12: gateway.StartTransferRequest
	(*StartTransferResponse)(nil),      // 13: gateway.StartTransferResponse
	(*GetTransferStatusRequest)(nil),   // 14: gateway.GetTransferStatusRequest
	(*GetTransferStatusResponse)(nil),  // 15: gateway.GetTransferStatusResponse
	(*CancelTransferRequest)(nil),      // 16: gateway.CancelTransferRequest
	(*CancelTransferResponse)(nil),     // 17: gateway.CancelTransferResponse
	(*CreatePipelineResponse)(nil),     // 18: gateway.CreatePipelineResponse
	(*UnifiedDataProfile)(nil),         // 19: gateway.UnifiedDataProfile
	(*UnifiedField)(nil),               // 20: gateway.UnifiedField
	(*GetPipelineRequest)(nil),         // 21: gateway.GetPipelineRequest
	(*PipelineDetails)(nil),            // 22: gateway.PipelineDetails
	nil,                                // 23: gateway.StartTransferRequest.OptionsEntry
	nil,                                // 24: gateway.GetTransferStatusResponse.MetadataEntry
}
var file_ateway_proto_depIdxs = []int32{
	19, // 0: gateway.DatabaseConnectionResponse.data_profile:type_name -> gateway.UnifiedDataProfile
	7,  // 1: gateway.CreatePipelineRequest.source:type_name -> gateway.DataSource
	11, // 2: gateway.CreatePipelineRequest.target:type_name -> gateway.DataTarget
	8,  // 3: gateway.DataSource.file:type_name -> gateway.FileSource
	9,  // 4: gateway.DataSource.db:type_name -> gateway.DatabaseSource
	10, // 5: gateway.DataSource.stream:type_name -> gateway.StreamSource
	23, // 6: gateway.StartTransferRequest.options:type_name -> gateway.StartTransferRequest.OptionsEntry
	24, // 7: gateway.GetTransferStatusResponse.metadata:type_name -> gateway.GetTransferStatusResponse.MetadataEntry
	19, // 8: gateway.CreatePipelineResponse.data_profile:type_name -> gateway.UnifiedDataProfile
	20, // 9: gateway.UnifiedDataProfile.fields:type_name -> gateway.UnifiedField
	0,  // 10: gateway.DataEngineeringAssistant.UploadCSV:input_type -> gateway.UploadCSVRequest
	1,  // 11: gateway.DataEngineeringAssistant.UploadJSON:input_type -> gateway.UploadJSONRequest
	2,  // 12: gateway.DataEngineeringAssistant.UploadXML:input_type -> gateway.UploadXMLRequest
	3,  // 13: gateway.DataEngineeringAssistant.ConnectDatabase:input_type -> gateway.DatabaseConnectionRequest
	6,  // 14: gateway.DataEngineeringAssistant.CreatePipeline:input_type -> gateway.CreatePipelineRequest
	21, // 15: gateway.DataEngineeringAssistant.GetPipeline:input_type -> gateway.GetPipelineRequest
	12, // 16: gateway.DataEngineeringAssistant.StartPostgresTransfer:input_type -> gateway.StartTransferRequest
	12, // 17: gateway.DataEngineeringAssistant.StartClickHouseTransfer:input_type -> gateway.StartTransferRequest
	12, // 18: gateway.DataEngineeringAssistant.StartHDFSTransfer:input_type -> gateway.StartTransferRequest
	14, // 19: gateway.DataEngineeringAssistant.GetTransferStatus:input_type -> gateway.GetTransferStatusRequest
	16, // 20: gateway.DataEngineeringAssistant.CancelTransfer:input_type -> gateway.CancelTransferRequest
	5,  // 21: gateway.DataEngineeringAssistant.UploadCSV:output_type -> gateway.UploadFileResponse
	5,  // 22: gateway.DataEngineeringAssistant.UploadJSON:output_type -> gateway.UploadFileResponse
	5,  // 23: gateway.DataEngineeringAssistant.UploadXML:output_type -> gateway.UploadFileResponse
	4,  // 24: gateway.DataEngineeringAssistant.ConnectDatabase:output_type -> gateway.DatabaseConnectionResponse
	18, // 25: gateway.DataEngineeringAssistant.CreatePipeline:output_type -> gateway.CreatePipelineResponse
	22, // 26: gateway.DataEngineeringAssistant.GetPipeline:output_type -> gateway.PipelineDetails
	13, // 27: gateway.DataEngineeringAssistant.StartPostgresTransfer:output_type -> gateway.StartTransferResponse
	13, // 28: gateway.DataEngineeringAssistant.StartClickHouseTransfer:output_type -> gateway.StartTransferResponse
	13, // 29: gateway.DataEngineeringAssistant.StartHDFSTransfer:output_type -> gateway.StartTransferResponse
	15, // 30: gateway.DataEngineeringAssistant.GetTransferStatus:output_type -> gateway.GetTransferStatusResponse
	17, // 31: gateway.DataEngineeringAssistant.CancelTransfer:output_type -> gateway.CancelTransferResponse
	21, // [21:32] is the sub-list for method output_type
	10, // [10:21] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_ateway_proto_init() }
func file_ateway_proto_init() {
	if File_ateway_proto != nil {
		return
	}
	file_ateway_proto_msgTypes[7].OneofWrappers = []any{
		(*DataSource_File)(nil),
		(*DataSource_Db)(nil),
		(*DataSource_Stream)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ateway_proto_rawDesc), len(file_ateway_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ateway_proto_goTypes,
		DependencyIndexes: file_ateway_proto_depIdxs,
		MessageInfos:      file_ateway_proto_msgTypes,
	}.Build()
	File_ateway_proto = out.File
	file_ateway_proto_goTypes = nil
	file_ateway_proto_depIdxs = nil
}
