// proto/profiler.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: profiler.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DataProfiler_Profile_FullMethodName     = "/profiler.DataProfiler/Profile"
	DataProfiler_UploadFile_FullMethodName  = "/profiler.DataProfiler/UploadFile"
	DataProfiler_ProcessFile_FullMethodName = "/profiler.DataProfiler/ProcessFile"
)

// DataProfilerClient is the client API for DataProfiler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataProfilerClient interface {
	Profile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileResponse, error)
	UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileResponse, error)
	ProcessFile(ctx context.Context, in *ProcessFileRequest, opts ...grpc.CallOption) (*ProcessFileResponse, error)
}

type dataProfilerClient struct {
	cc grpc.ClientConnInterface
}

func NewDataProfilerClient(cc grpc.ClientConnInterface) DataProfilerClient {
	return &dataProfilerClient{cc}
}

func (c *dataProfilerClient) Profile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProfileResponse)
	err := c.cc.Invoke(ctx, DataProfiler_Profile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataProfilerClient) UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadFileResponse)
	err := c.cc.Invoke(ctx, DataProfiler_UploadFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataProfilerClient) ProcessFile(ctx context.Context, in *ProcessFileRequest, opts ...grpc.CallOption) (*ProcessFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessFileResponse)
	err := c.cc.Invoke(ctx, DataProfiler_ProcessFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataProfilerServer is the server API for DataProfiler service.
// All implementations must embed UnimplementedDataProfilerServer
// for forward compatibility.
type DataProfilerServer interface {
	Profile(context.Context, *ProfileRequest) (*ProfileResponse, error)
	UploadFile(context.Context, *UploadFileRequest) (*UploadFileResponse, error)
	ProcessFile(context.Context, *ProcessFileRequest) (*ProcessFileResponse, error)
	mustEmbedUnimplementedDataProfilerServer()
}

// UnimplementedDataProfilerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDataProfilerServer struct{}

func (UnimplementedDataProfilerServer) Profile(context.Context, *ProfileRequest) (*ProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Profile not implemented")
}
func (UnimplementedDataProfilerServer) UploadFile(context.Context, *UploadFileRequest) (*UploadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedDataProfilerServer) ProcessFile(context.Context, *ProcessFileRequest) (*ProcessFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessFile not implemented")
}
func (UnimplementedDataProfilerServer) mustEmbedUnimplementedDataProfilerServer() {}
func (UnimplementedDataProfilerServer) testEmbeddedByValue()                      {}

// UnsafeDataProfilerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataProfilerServer will
// result in compilation errors.
type UnsafeDataProfilerServer interface {
	mustEmbedUnimplementedDataProfilerServer()
}

func RegisterDataProfilerServer(s grpc.ServiceRegistrar, srv DataProfilerServer) {
	// If the following call pancis, it indicates UnimplementedDataProfilerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DataProfiler_ServiceDesc, srv)
}

func _DataProfiler_Profile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataProfilerServer).Profile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataProfiler_Profile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataProfilerServer).Profile(ctx, req.(*ProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataProfiler_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataProfilerServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataProfiler_UploadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataProfilerServer).UploadFile(ctx, req.(*UploadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataProfiler_ProcessFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataProfilerServer).ProcessFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataProfiler_ProcessFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataProfilerServer).ProcessFile(ctx, req.(*ProcessFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataProfiler_ServiceDesc is the grpc.ServiceDesc for DataProfiler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataProfiler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "profiler.DataProfiler",
	HandlerType: (*DataProfilerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Profile",
			Handler:    _DataProfiler_Profile_Handler,
		},
		{
			MethodName: "UploadFile",
			Handler:    _DataProfiler_UploadFile_Handler,
		},
		{
			MethodName: "ProcessFile",
			Handler:    _DataProfiler_ProcessFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "profiler.proto",
}
