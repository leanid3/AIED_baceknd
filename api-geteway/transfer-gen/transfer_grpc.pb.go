// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: transfer.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DataTransfer_TransferToPostgres_FullMethodName   = "/transfer.DataTransfer/TransferToPostgres"
	DataTransfer_TransferToClickHouse_FullMethodName = "/transfer.DataTransfer/TransferToClickHouse"
	DataTransfer_TransferToHDFS_FullMethodName       = "/transfer.DataTransfer/TransferToHDFS"
	DataTransfer_GetTransferStatus_FullMethodName    = "/transfer.DataTransfer/GetTransferStatus"
	DataTransfer_CancelTransfer_FullMethodName       = "/transfer.DataTransfer/CancelTransfer"
)

// DataTransferClient is the client API for DataTransfer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Сервис для переноса данных в целевые системы
type DataTransferClient interface {
	// Перенос данных в PostgreSQL
	TransferToPostgres(ctx context.Context, in *PostgresTransferRequest, opts ...grpc.CallOption) (*TransferResponse, error)
	// Перенос данных в ClickHouse
	TransferToClickHouse(ctx context.Context, in *ClickHouseTransferRequest, opts ...grpc.CallOption) (*TransferResponse, error)
	// Перенос данных в HDFS
	TransferToHDFS(ctx context.Context, in *HDFSTransferRequest, opts ...grpc.CallOption) (*TransferResponse, error)
	// Получение статуса переноса
	GetTransferStatus(ctx context.Context, in *TransferStatusRequest, opts ...grpc.CallOption) (*TransferStatusResponse, error)
	// Отмена переноса
	CancelTransfer(ctx context.Context, in *CancelTransferRequest, opts ...grpc.CallOption) (*TransferResponse, error)
}

type dataTransferClient struct {
	cc grpc.ClientConnInterface
}

func NewDataTransferClient(cc grpc.ClientConnInterface) DataTransferClient {
	return &dataTransferClient{cc}
}

func (c *dataTransferClient) TransferToPostgres(ctx context.Context, in *PostgresTransferRequest, opts ...grpc.CallOption) (*TransferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferResponse)
	err := c.cc.Invoke(ctx, DataTransfer_TransferToPostgres_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataTransferClient) TransferToClickHouse(ctx context.Context, in *ClickHouseTransferRequest, opts ...grpc.CallOption) (*TransferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferResponse)
	err := c.cc.Invoke(ctx, DataTransfer_TransferToClickHouse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataTransferClient) TransferToHDFS(ctx context.Context, in *HDFSTransferRequest, opts ...grpc.CallOption) (*TransferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferResponse)
	err := c.cc.Invoke(ctx, DataTransfer_TransferToHDFS_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataTransferClient) GetTransferStatus(ctx context.Context, in *TransferStatusRequest, opts ...grpc.CallOption) (*TransferStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferStatusResponse)
	err := c.cc.Invoke(ctx, DataTransfer_GetTransferStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataTransferClient) CancelTransfer(ctx context.Context, in *CancelTransferRequest, opts ...grpc.CallOption) (*TransferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferResponse)
	err := c.cc.Invoke(ctx, DataTransfer_CancelTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataTransferServer is the server API for DataTransfer service.
// All implementations must embed UnimplementedDataTransferServer
// for forward compatibility.
//
// Сервис для переноса данных в целевые системы
type DataTransferServer interface {
	// Перенос данных в PostgreSQL
	TransferToPostgres(context.Context, *PostgresTransferRequest) (*TransferResponse, error)
	// Перенос данных в ClickHouse
	TransferToClickHouse(context.Context, *ClickHouseTransferRequest) (*TransferResponse, error)
	// Перенос данных в HDFS
	TransferToHDFS(context.Context, *HDFSTransferRequest) (*TransferResponse, error)
	// Получение статуса переноса
	GetTransferStatus(context.Context, *TransferStatusRequest) (*TransferStatusResponse, error)
	// Отмена переноса
	CancelTransfer(context.Context, *CancelTransferRequest) (*TransferResponse, error)
	mustEmbedUnimplementedDataTransferServer()
}

// UnimplementedDataTransferServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDataTransferServer struct{}

func (UnimplementedDataTransferServer) TransferToPostgres(context.Context, *PostgresTransferRequest) (*TransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferToPostgres not implemented")
}
func (UnimplementedDataTransferServer) TransferToClickHouse(context.Context, *ClickHouseTransferRequest) (*TransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferToClickHouse not implemented")
}
func (UnimplementedDataTransferServer) TransferToHDFS(context.Context, *HDFSTransferRequest) (*TransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferToHDFS not implemented")
}
func (UnimplementedDataTransferServer) GetTransferStatus(context.Context, *TransferStatusRequest) (*TransferStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransferStatus not implemented")
}
func (UnimplementedDataTransferServer) CancelTransfer(context.Context, *CancelTransferRequest) (*TransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTransfer not implemented")
}
func (UnimplementedDataTransferServer) mustEmbedUnimplementedDataTransferServer() {}
func (UnimplementedDataTransferServer) testEmbeddedByValue()                      {}

// UnsafeDataTransferServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataTransferServer will
// result in compilation errors.
type UnsafeDataTransferServer interface {
	mustEmbedUnimplementedDataTransferServer()
}

func RegisterDataTransferServer(s grpc.ServiceRegistrar, srv DataTransferServer) {
	// If the following call pancis, it indicates UnimplementedDataTransferServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DataTransfer_ServiceDesc, srv)
}

func _DataTransfer_TransferToPostgres_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostgresTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataTransferServer).TransferToPostgres(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataTransfer_TransferToPostgres_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataTransferServer).TransferToPostgres(ctx, req.(*PostgresTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataTransfer_TransferToClickHouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClickHouseTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataTransferServer).TransferToClickHouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataTransfer_TransferToClickHouse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataTransferServer).TransferToClickHouse(ctx, req.(*ClickHouseTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataTransfer_TransferToHDFS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HDFSTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataTransferServer).TransferToHDFS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataTransfer_TransferToHDFS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataTransferServer).TransferToHDFS(ctx, req.(*HDFSTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataTransfer_GetTransferStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataTransferServer).GetTransferStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataTransfer_GetTransferStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataTransferServer).GetTransferStatus(ctx, req.(*TransferStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataTransfer_CancelTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataTransferServer).CancelTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataTransfer_CancelTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataTransferServer).CancelTransfer(ctx, req.(*CancelTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataTransfer_ServiceDesc is the grpc.ServiceDesc for DataTransfer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataTransfer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transfer.DataTransfer",
	HandlerType: (*DataTransferServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TransferToPostgres",
			Handler:    _DataTransfer_TransferToPostgres_Handler,
		},
		{
			MethodName: "TransferToClickHouse",
			Handler:    _DataTransfer_TransferToClickHouse_Handler,
		},
		{
			MethodName: "TransferToHDFS",
			Handler:    _DataTransfer_TransferToHDFS_Handler,
		},
		{
			MethodName: "GetTransferStatus",
			Handler:    _DataTransfer_GetTransferStatus_Handler,
		},
		{
			MethodName: "CancelTransfer",
			Handler:    _DataTransfer_CancelTransfer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transfer.proto",
}
