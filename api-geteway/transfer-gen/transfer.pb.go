// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.1
// source: transfer.proto

package gen

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Запрос переноса в PostgreSQL
type PostgresTransferRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TransferId    string                 `protobuf:"bytes,1,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SourceFileId  string                 `protobuf:"bytes,3,opt,name=source_file_id,json=sourceFileId,proto3" json:"source_file_id,omitempty"` // ID файла из data-profiler
	SourceUrl     string                 `protobuf:"bytes,4,opt,name=source_url,json=sourceUrl,proto3" json:"source_url,omitempty"`            // URL источника данных
	SourceFormat  string                 `protobuf:"bytes,5,opt,name=source_format,json=sourceFormat,proto3" json:"source_format,omitempty"`   // csv, json, xml
	TargetConfig  *PostgresConfig        `protobuf:"bytes,6,opt,name=target_config,json=targetConfig,proto3" json:"target_config,omitempty"`
	Options       *TransferOptions       `protobuf:"bytes,7,opt,name=options,proto3" json:"options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PostgresTransferRequest) Reset() {
	*x = PostgresTransferRequest{}
	mi := &file_transfer_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgresTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresTransferRequest) ProtoMessage() {}

func (x *PostgresTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresTransferRequest.ProtoReflect.Descriptor instead.
func (*PostgresTransferRequest) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{0}
}

func (x *PostgresTransferRequest) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *PostgresTransferRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PostgresTransferRequest) GetSourceFileId() string {
	if x != nil {
		return x.SourceFileId
	}
	return ""
}

func (x *PostgresTransferRequest) GetSourceUrl() string {
	if x != nil {
		return x.SourceUrl
	}
	return ""
}

func (x *PostgresTransferRequest) GetSourceFormat() string {
	if x != nil {
		return x.SourceFormat
	}
	return ""
}

func (x *PostgresTransferRequest) GetTargetConfig() *PostgresConfig {
	if x != nil {
		return x.TargetConfig
	}
	return nil
}

func (x *PostgresTransferRequest) GetOptions() *TransferOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

// Запрос переноса в ClickHouse
type ClickHouseTransferRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TransferId    string                 `protobuf:"bytes,1,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SourceFileId  string                 `protobuf:"bytes,3,opt,name=source_file_id,json=sourceFileId,proto3" json:"source_file_id,omitempty"`
	SourceUrl     string                 `protobuf:"bytes,4,opt,name=source_url,json=sourceUrl,proto3" json:"source_url,omitempty"`
	SourceFormat  string                 `protobuf:"bytes,5,opt,name=source_format,json=sourceFormat,proto3" json:"source_format,omitempty"`
	TargetConfig  *ClickHouseConfig      `protobuf:"bytes,6,opt,name=target_config,json=targetConfig,proto3" json:"target_config,omitempty"`
	Options       *TransferOptions       `protobuf:"bytes,7,opt,name=options,proto3" json:"options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClickHouseTransferRequest) Reset() {
	*x = ClickHouseTransferRequest{}
	mi := &file_transfer_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClickHouseTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickHouseTransferRequest) ProtoMessage() {}

func (x *ClickHouseTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickHouseTransferRequest.ProtoReflect.Descriptor instead.
func (*ClickHouseTransferRequest) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{1}
}

func (x *ClickHouseTransferRequest) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *ClickHouseTransferRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ClickHouseTransferRequest) GetSourceFileId() string {
	if x != nil {
		return x.SourceFileId
	}
	return ""
}

func (x *ClickHouseTransferRequest) GetSourceUrl() string {
	if x != nil {
		return x.SourceUrl
	}
	return ""
}

func (x *ClickHouseTransferRequest) GetSourceFormat() string {
	if x != nil {
		return x.SourceFormat
	}
	return ""
}

func (x *ClickHouseTransferRequest) GetTargetConfig() *ClickHouseConfig {
	if x != nil {
		return x.TargetConfig
	}
	return nil
}

func (x *ClickHouseTransferRequest) GetOptions() *TransferOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

// Запрос переноса в HDFS
type HDFSTransferRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TransferId    string                 `protobuf:"bytes,1,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SourceFileId  string                 `protobuf:"bytes,3,opt,name=source_file_id,json=sourceFileId,proto3" json:"source_file_id,omitempty"`
	SourceUrl     string                 `protobuf:"bytes,4,opt,name=source_url,json=sourceUrl,proto3" json:"source_url,omitempty"`
	SourceFormat  string                 `protobuf:"bytes,5,opt,name=source_format,json=sourceFormat,proto3" json:"source_format,omitempty"`
	TargetConfig  *HDFSConfig            `protobuf:"bytes,6,opt,name=target_config,json=targetConfig,proto3" json:"target_config,omitempty"`
	Options       *TransferOptions       `protobuf:"bytes,7,opt,name=options,proto3" json:"options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HDFSTransferRequest) Reset() {
	*x = HDFSTransferRequest{}
	mi := &file_transfer_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HDFSTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HDFSTransferRequest) ProtoMessage() {}

func (x *HDFSTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HDFSTransferRequest.ProtoReflect.Descriptor instead.
func (*HDFSTransferRequest) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{2}
}

func (x *HDFSTransferRequest) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *HDFSTransferRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *HDFSTransferRequest) GetSourceFileId() string {
	if x != nil {
		return x.SourceFileId
	}
	return ""
}

func (x *HDFSTransferRequest) GetSourceUrl() string {
	if x != nil {
		return x.SourceUrl
	}
	return ""
}

func (x *HDFSTransferRequest) GetSourceFormat() string {
	if x != nil {
		return x.SourceFormat
	}
	return ""
}

func (x *HDFSTransferRequest) GetTargetConfig() *HDFSConfig {
	if x != nil {
		return x.TargetConfig
	}
	return nil
}

func (x *HDFSTransferRequest) GetOptions() *TransferOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

// Запрос статуса переноса
type TransferStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TransferId    string                 `protobuf:"bytes,1,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransferStatusRequest) Reset() {
	*x = TransferStatusRequest{}
	mi := &file_transfer_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferStatusRequest) ProtoMessage() {}

func (x *TransferStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferStatusRequest.ProtoReflect.Descriptor instead.
func (*TransferStatusRequest) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{3}
}

func (x *TransferStatusRequest) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

// Запрос отмены переноса
type CancelTransferRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TransferId    string                 `protobuf:"bytes,1,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelTransferRequest) Reset() {
	*x = CancelTransferRequest{}
	mi := &file_transfer_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelTransferRequest) ProtoMessage() {}

func (x *CancelTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelTransferRequest.ProtoReflect.Descriptor instead.
func (*CancelTransferRequest) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{4}
}

func (x *CancelTransferRequest) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *CancelTransferRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// Конфигурация PostgreSQL
type PostgresConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Host          string                 `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port          int32                  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Database      string                 `protobuf:"bytes,3,opt,name=database,proto3" json:"database,omitempty"`
	Username      string                 `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	Password      string                 `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	TableName     string                 `protobuf:"bytes,6,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	Schema        string                 `protobuf:"bytes,7,opt,name=schema,proto3" json:"schema,omitempty"`                                  // опционально
	CreateTable   bool                   `protobuf:"varint,8,opt,name=create_table,json=createTable,proto3" json:"create_table,omitempty"`    // создавать таблицу если не существует
	DropExisting  bool                   `protobuf:"varint,9,opt,name=drop_existing,json=dropExisting,proto3" json:"drop_existing,omitempty"` // удалять существующую таблицу
	DdlScript     string                 `protobuf:"bytes,10,opt,name=ddl_script,json=ddlScript,proto3" json:"ddl_script,omitempty"`          // DDL скрипт для создания таблицы
	Indexes       []string               `protobuf:"bytes,11,rep,name=indexes,proto3" json:"indexes,omitempty"`                               // индексы для создания
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PostgresConfig) Reset() {
	*x = PostgresConfig{}
	mi := &file_transfer_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgresConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresConfig) ProtoMessage() {}

func (x *PostgresConfig) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresConfig.ProtoReflect.Descriptor instead.
func (*PostgresConfig) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{5}
}

func (x *PostgresConfig) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *PostgresConfig) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *PostgresConfig) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *PostgresConfig) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *PostgresConfig) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *PostgresConfig) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *PostgresConfig) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *PostgresConfig) GetCreateTable() bool {
	if x != nil {
		return x.CreateTable
	}
	return false
}

func (x *PostgresConfig) GetDropExisting() bool {
	if x != nil {
		return x.DropExisting
	}
	return false
}

func (x *PostgresConfig) GetDdlScript() string {
	if x != nil {
		return x.DdlScript
	}
	return ""
}

func (x *PostgresConfig) GetIndexes() []string {
	if x != nil {
		return x.Indexes
	}
	return nil
}

// Конфигурация ClickHouse
type ClickHouseConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Host          string                 `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port          int32                  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Database      string                 `protobuf:"bytes,3,opt,name=database,proto3" json:"database,omitempty"`
	Username      string                 `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	Password      string                 `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	TableName     string                 `protobuf:"bytes,6,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	Engine        string                 `protobuf:"bytes,7,opt,name=engine,proto3" json:"engine,omitempty"`                              // MergeTree, ReplacingMergeTree, etc.
	PartitionBy   string                 `protobuf:"bytes,8,opt,name=partition_by,json=partitionBy,proto3" json:"partition_by,omitempty"` // поле для партиционирования
	OrderBy       string                 `protobuf:"bytes,9,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`             // поле для сортировки
	CreateTable   bool                   `protobuf:"varint,10,opt,name=create_table,json=createTable,proto3" json:"create_table,omitempty"`
	DropExisting  bool                   `protobuf:"varint,11,opt,name=drop_existing,json=dropExisting,proto3" json:"drop_existing,omitempty"`
	DdlScript     string                 `protobuf:"bytes,12,opt,name=ddl_script,json=ddlScript,proto3" json:"ddl_script,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClickHouseConfig) Reset() {
	*x = ClickHouseConfig{}
	mi := &file_transfer_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClickHouseConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickHouseConfig) ProtoMessage() {}

func (x *ClickHouseConfig) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickHouseConfig.ProtoReflect.Descriptor instead.
func (*ClickHouseConfig) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{6}
}

func (x *ClickHouseConfig) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ClickHouseConfig) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ClickHouseConfig) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *ClickHouseConfig) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ClickHouseConfig) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ClickHouseConfig) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *ClickHouseConfig) GetEngine() string {
	if x != nil {
		return x.Engine
	}
	return ""
}

func (x *ClickHouseConfig) GetPartitionBy() string {
	if x != nil {
		return x.PartitionBy
	}
	return ""
}

func (x *ClickHouseConfig) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *ClickHouseConfig) GetCreateTable() bool {
	if x != nil {
		return x.CreateTable
	}
	return false
}

func (x *ClickHouseConfig) GetDropExisting() bool {
	if x != nil {
		return x.DropExisting
	}
	return false
}

func (x *ClickHouseConfig) GetDdlScript() string {
	if x != nil {
		return x.DdlScript
	}
	return ""
}

// Конфигурация HDFS
type HDFSConfig struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	NamenodeHost      string                 `protobuf:"bytes,1,opt,name=namenode_host,json=namenodeHost,proto3" json:"namenode_host,omitempty"`
	NamenodePort      int32                  `protobuf:"varint,2,opt,name=namenode_port,json=namenodePort,proto3" json:"namenode_port,omitempty"`
	HdfsPath          string                 `protobuf:"bytes,3,opt,name=hdfs_path,json=hdfsPath,proto3" json:"hdfs_path,omitempty"`       // путь в HDFS
	FileFormat        string                 `protobuf:"bytes,4,opt,name=file_format,json=fileFormat,proto3" json:"file_format,omitempty"` // parquet, orc, csv, json
	ReplicationFactor int32                  `protobuf:"varint,5,opt,name=replication_factor,json=replicationFactor,proto3" json:"replication_factor,omitempty"`
	BlockSize         int64                  `protobuf:"varint,6,opt,name=block_size,json=blockSize,proto3" json:"block_size,omitempty"`
	Properties        map[string]string      `protobuf:"bytes,7,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // дополнительные свойства
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *HDFSConfig) Reset() {
	*x = HDFSConfig{}
	mi := &file_transfer_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HDFSConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HDFSConfig) ProtoMessage() {}

func (x *HDFSConfig) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HDFSConfig.ProtoReflect.Descriptor instead.
func (*HDFSConfig) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{7}
}

func (x *HDFSConfig) GetNamenodeHost() string {
	if x != nil {
		return x.NamenodeHost
	}
	return ""
}

func (x *HDFSConfig) GetNamenodePort() int32 {
	if x != nil {
		return x.NamenodePort
	}
	return 0
}

func (x *HDFSConfig) GetHdfsPath() string {
	if x != nil {
		return x.HdfsPath
	}
	return ""
}

func (x *HDFSConfig) GetFileFormat() string {
	if x != nil {
		return x.FileFormat
	}
	return ""
}

func (x *HDFSConfig) GetReplicationFactor() int32 {
	if x != nil {
		return x.ReplicationFactor
	}
	return 0
}

func (x *HDFSConfig) GetBlockSize() int64 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *HDFSConfig) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

// Опции переноса
type TransferOptions struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	BatchSize       int32                  `protobuf:"varint,1,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`                  // размер батча для вставки
	MaxWorkers      int32                  `protobuf:"varint,2,opt,name=max_workers,json=maxWorkers,proto3" json:"max_workers,omitempty"`               // количество воркеров
	ValidateData    bool                   `protobuf:"varint,3,opt,name=validate_data,json=validateData,proto3" json:"validate_data,omitempty"`         // валидация данных
	CompressData    bool                   `protobuf:"varint,4,opt,name=compress_data,json=compressData,proto3" json:"compress_data,omitempty"`         // сжатие данных
	CompressionType string                 `protobuf:"bytes,5,opt,name=compression_type,json=compressionType,proto3" json:"compression_type,omitempty"` // gzip, lz4, snappy
	TimeoutSeconds  int32                  `protobuf:"varint,6,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`   // таймаут операции
	RetryOnFailure  bool                   `protobuf:"varint,7,opt,name=retry_on_failure,json=retryOnFailure,proto3" json:"retry_on_failure,omitempty"` // повтор при ошибке
	MaxRetries      int32                  `protobuf:"varint,8,opt,name=max_retries,json=maxRetries,proto3" json:"max_retries,omitempty"`               // максимальное количество повторов
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TransferOptions) Reset() {
	*x = TransferOptions{}
	mi := &file_transfer_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferOptions) ProtoMessage() {}

func (x *TransferOptions) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferOptions.ProtoReflect.Descriptor instead.
func (*TransferOptions) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{8}
}

func (x *TransferOptions) GetBatchSize() int32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *TransferOptions) GetMaxWorkers() int32 {
	if x != nil {
		return x.MaxWorkers
	}
	return 0
}

func (x *TransferOptions) GetValidateData() bool {
	if x != nil {
		return x.ValidateData
	}
	return false
}

func (x *TransferOptions) GetCompressData() bool {
	if x != nil {
		return x.CompressData
	}
	return false
}

func (x *TransferOptions) GetCompressionType() string {
	if x != nil {
		return x.CompressionType
	}
	return ""
}

func (x *TransferOptions) GetTimeoutSeconds() int32 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

func (x *TransferOptions) GetRetryOnFailure() bool {
	if x != nil {
		return x.RetryOnFailure
	}
	return false
}

func (x *TransferOptions) GetMaxRetries() int32 {
	if x != nil {
		return x.MaxRetries
	}
	return 0
}

// Ответ на запрос переноса
type TransferResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	TransferId        string                 `protobuf:"bytes,1,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`
	Status            string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"` // "started", "failed", "cancelled"
	Message           string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	EstimatedDuration int64                  `protobuf:"varint,4,opt,name=estimated_duration,json=estimatedDuration,proto3" json:"estimated_duration,omitempty"` // примерная длительность в секундах
	EstimatedSize     int64                  `protobuf:"varint,5,opt,name=estimated_size,json=estimatedSize,proto3" json:"estimated_size,omitempty"`             // примерный размер данных в байтах
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TransferResponse) Reset() {
	*x = TransferResponse{}
	mi := &file_transfer_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferResponse) ProtoMessage() {}

func (x *TransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferResponse.ProtoReflect.Descriptor instead.
func (*TransferResponse) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{9}
}

func (x *TransferResponse) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *TransferResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TransferResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TransferResponse) GetEstimatedDuration() int64 {
	if x != nil {
		return x.EstimatedDuration
	}
	return 0
}

func (x *TransferResponse) GetEstimatedSize() int64 {
	if x != nil {
		return x.EstimatedSize
	}
	return 0
}

// Ответ со статусом переноса
type TransferStatusResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TransferId      string                 `protobuf:"bytes,1,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`
	Status          string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"` // "pending", "running", "completed", "failed", "cancelled"
	Message         string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	ProgressPercent int32                  `protobuf:"varint,4,opt,name=progress_percent,json=progressPercent,proto3" json:"progress_percent,omitempty"`                                      // прогресс в процентах
	ProcessedRows   int64                  `protobuf:"varint,5,opt,name=processed_rows,json=processedRows,proto3" json:"processed_rows,omitempty"`                                            // количество обработанных строк
	TotalRows       int64                  `protobuf:"varint,6,opt,name=total_rows,json=totalRows,proto3" json:"total_rows,omitempty"`                                                        // общее количество строк
	ProcessedBytes  int64                  `protobuf:"varint,7,opt,name=processed_bytes,json=processedBytes,proto3" json:"processed_bytes,omitempty"`                                         // количество обработанных байт
	TotalBytes      int64                  `protobuf:"varint,8,opt,name=total_bytes,json=totalBytes,proto3" json:"total_bytes,omitempty"`                                                     // общий размер данных
	StartedAt       string                 `protobuf:"bytes,9,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`                                                         // время начала
	CompletedAt     string                 `protobuf:"bytes,10,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`                                                  // время завершения
	ErrorMessage    string                 `protobuf:"bytes,11,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`                                               // сообщение об ошибке
	Metadata        map[string]string      `protobuf:"bytes,12,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // дополнительная информация
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TransferStatusResponse) Reset() {
	*x = TransferStatusResponse{}
	mi := &file_transfer_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferStatusResponse) ProtoMessage() {}

func (x *TransferStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferStatusResponse.ProtoReflect.Descriptor instead.
func (*TransferStatusResponse) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{10}
}

func (x *TransferStatusResponse) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *TransferStatusResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TransferStatusResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TransferStatusResponse) GetProgressPercent() int32 {
	if x != nil {
		return x.ProgressPercent
	}
	return 0
}

func (x *TransferStatusResponse) GetProcessedRows() int64 {
	if x != nil {
		return x.ProcessedRows
	}
	return 0
}

func (x *TransferStatusResponse) GetTotalRows() int64 {
	if x != nil {
		return x.TotalRows
	}
	return 0
}

func (x *TransferStatusResponse) GetProcessedBytes() int64 {
	if x != nil {
		return x.ProcessedBytes
	}
	return 0
}

func (x *TransferStatusResponse) GetTotalBytes() int64 {
	if x != nil {
		return x.TotalBytes
	}
	return 0
}

func (x *TransferStatusResponse) GetStartedAt() string {
	if x != nil {
		return x.StartedAt
	}
	return ""
}

func (x *TransferStatusResponse) GetCompletedAt() string {
	if x != nil {
		return x.CompletedAt
	}
	return ""
}

func (x *TransferStatusResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *TransferStatusResponse) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

var File_transfer_proto protoreflect.FileDescriptor

const file_transfer_proto_rawDesc = "" +
	"\n" +
	"\x0etransfer.proto\x12\btransfer\x1a\x1cgoogle/api/annotations.proto\"\xb1\x02\n" +
	"\x17PostgresTransferRequest\x12\x1f\n" +
	"\vtransfer_id\x18\x01 \x01(\tR\n" +
	"transferId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12$\n" +
	"\x0esource_file_id\x18\x03 \x01(\tR\fsourceFileId\x12\x1d\n" +
	"\n" +
	"source_url\x18\x04 \x01(\tR\tsourceUrl\x12#\n" +
	"\rsource_format\x18\x05 \x01(\tR\fsourceFormat\x12=\n" +
	"\rtarget_config\x18\x06 \x01(\v2\x18.transfer.PostgresConfigR\ftargetConfig\x123\n" +
	"\aoptions\x18\a \x01(\v2\x19.transfer.TransferOptionsR\aoptions\"\xb5\x02\n" +
	"\x19ClickHouseTransferRequest\x12\x1f\n" +
	"\vtransfer_id\x18\x01 \x01(\tR\n" +
	"transferId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12$\n" +
	"\x0esource_file_id\x18\x03 \x01(\tR\fsourceFileId\x12\x1d\n" +
	"\n" +
	"source_url\x18\x04 \x01(\tR\tsourceUrl\x12#\n" +
	"\rsource_format\x18\x05 \x01(\tR\fsourceFormat\x12?\n" +
	"\rtarget_config\x18\x06 \x01(\v2\x1a.transfer.ClickHouseConfigR\ftargetConfig\x123\n" +
	"\aoptions\x18\a \x01(\v2\x19.transfer.TransferOptionsR\aoptions\"\xa9\x02\n" +
	"\x13HDFSTransferRequest\x12\x1f\n" +
	"\vtransfer_id\x18\x01 \x01(\tR\n" +
	"transferId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12$\n" +
	"\x0esource_file_id\x18\x03 \x01(\tR\fsourceFileId\x12\x1d\n" +
	"\n" +
	"source_url\x18\x04 \x01(\tR\tsourceUrl\x12#\n" +
	"\rsource_format\x18\x05 \x01(\tR\fsourceFormat\x129\n" +
	"\rtarget_config\x18\x06 \x01(\v2\x14.transfer.HDFSConfigR\ftargetConfig\x123\n" +
	"\aoptions\x18\a \x01(\v2\x19.transfer.TransferOptionsR\aoptions\"8\n" +
	"\x15TransferStatusRequest\x12\x1f\n" +
	"\vtransfer_id\x18\x01 \x01(\tR\n" +
	"transferId\"Q\n" +
	"\x15CancelTransferRequest\x12\x1f\n" +
	"\vtransfer_id\x18\x01 \x01(\tR\n" +
	"transferId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\"\xc4\x02\n" +
	"\x0ePostgresConfig\x12\x12\n" +
	"\x04host\x18\x01 \x01(\tR\x04host\x12\x12\n" +
	"\x04port\x18\x02 \x01(\x05R\x04port\x12\x1a\n" +
	"\bdatabase\x18\x03 \x01(\tR\bdatabase\x12\x1a\n" +
	"\busername\x18\x04 \x01(\tR\busername\x12\x1a\n" +
	"\bpassword\x18\x05 \x01(\tR\bpassword\x12\x1d\n" +
	"\n" +
	"table_name\x18\x06 \x01(\tR\ttableName\x12\x16\n" +
	"\x06schema\x18\a \x01(\tR\x06schema\x12!\n" +
	"\fcreate_table\x18\b \x01(\bR\vcreateTable\x12#\n" +
	"\rdrop_existing\x18\t \x01(\bR\fdropExisting\x12\x1d\n" +
	"\n" +
	"ddl_script\x18\n" +
	" \x01(\tR\tddlScript\x12\x18\n" +
	"\aindexes\x18\v \x03(\tR\aindexes\"\xea\x02\n" +
	"\x10ClickHouseConfig\x12\x12\n" +
	"\x04host\x18\x01 \x01(\tR\x04host\x12\x12\n" +
	"\x04port\x18\x02 \x01(\x05R\x04port\x12\x1a\n" +
	"\bdatabase\x18\x03 \x01(\tR\bdatabase\x12\x1a\n" +
	"\busername\x18\x04 \x01(\tR\busername\x12\x1a\n" +
	"\bpassword\x18\x05 \x01(\tR\bpassword\x12\x1d\n" +
	"\n" +
	"table_name\x18\x06 \x01(\tR\ttableName\x12\x16\n" +
	"\x06engine\x18\a \x01(\tR\x06engine\x12!\n" +
	"\fpartition_by\x18\b \x01(\tR\vpartitionBy\x12\x19\n" +
	"\border_by\x18\t \x01(\tR\aorderBy\x12!\n" +
	"\fcreate_table\x18\n" +
	" \x01(\bR\vcreateTable\x12#\n" +
	"\rdrop_existing\x18\v \x01(\bR\fdropExisting\x12\x1d\n" +
	"\n" +
	"ddl_script\x18\f \x01(\tR\tddlScript\"\xe7\x02\n" +
	"\n" +
	"HDFSConfig\x12#\n" +
	"\rnamenode_host\x18\x01 \x01(\tR\fnamenodeHost\x12#\n" +
	"\rnamenode_port\x18\x02 \x01(\x05R\fnamenodePort\x12\x1b\n" +
	"\thdfs_path\x18\x03 \x01(\tR\bhdfsPath\x12\x1f\n" +
	"\vfile_format\x18\x04 \x01(\tR\n" +
	"fileFormat\x12-\n" +
	"\x12replication_factor\x18\x05 \x01(\x05R\x11replicationFactor\x12\x1d\n" +
	"\n" +
	"block_size\x18\x06 \x01(\x03R\tblockSize\x12D\n" +
	"\n" +
	"properties\x18\a \x03(\v2$.transfer.HDFSConfig.PropertiesEntryR\n" +
	"properties\x1a=\n" +
	"\x0fPropertiesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xba\x02\n" +
	"\x0fTransferOptions\x12\x1d\n" +
	"\n" +
	"batch_size\x18\x01 \x01(\x05R\tbatchSize\x12\x1f\n" +
	"\vmax_workers\x18\x02 \x01(\x05R\n" +
	"maxWorkers\x12#\n" +
	"\rvalidate_data\x18\x03 \x01(\bR\fvalidateData\x12#\n" +
	"\rcompress_data\x18\x04 \x01(\bR\fcompressData\x12)\n" +
	"\x10compression_type\x18\x05 \x01(\tR\x0fcompressionType\x12'\n" +
	"\x0ftimeout_seconds\x18\x06 \x01(\x05R\x0etimeoutSeconds\x12(\n" +
	"\x10retry_on_failure\x18\a \x01(\bR\x0eretryOnFailure\x12\x1f\n" +
	"\vmax_retries\x18\b \x01(\x05R\n" +
	"maxRetries\"\xbb\x01\n" +
	"\x10TransferResponse\x12\x1f\n" +
	"\vtransfer_id\x18\x01 \x01(\tR\n" +
	"transferId\x12\x16\n" +
	"\x06status\x18\x02 \x01(\tR\x06status\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\x12-\n" +
	"\x12estimated_duration\x18\x04 \x01(\x03R\x11estimatedDuration\x12%\n" +
	"\x0eestimated_size\x18\x05 \x01(\x03R\restimatedSize\"\x96\x04\n" +
	"\x16TransferStatusResponse\x12\x1f\n" +
	"\vtransfer_id\x18\x01 \x01(\tR\n" +
	"transferId\x12\x16\n" +
	"\x06status\x18\x02 \x01(\tR\x06status\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\x12)\n" +
	"\x10progress_percent\x18\x04 \x01(\x05R\x0fprogressPercent\x12%\n" +
	"\x0eprocessed_rows\x18\x05 \x01(\x03R\rprocessedRows\x12\x1d\n" +
	"\n" +
	"total_rows\x18\x06 \x01(\x03R\ttotalRows\x12'\n" +
	"\x0fprocessed_bytes\x18\a \x01(\x03R\x0eprocessedBytes\x12\x1f\n" +
	"\vtotal_bytes\x18\b \x01(\x03R\n" +
	"totalBytes\x12\x1d\n" +
	"\n" +
	"started_at\x18\t \x01(\tR\tstartedAt\x12!\n" +
	"\fcompleted_at\x18\n" +
	" \x01(\tR\vcompletedAt\x12#\n" +
	"\rerror_message\x18\v \x01(\tR\ferrorMessage\x12J\n" +
	"\bmetadata\x18\f \x03(\v2..transfer.TransferStatusResponse.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x012\xe0\x04\n" +
	"\fDataTransfer\x12u\n" +
	"\x12TransferToPostgres\x12!.transfer.PostgresTransferRequest\x1a\x1a.transfer.TransferResponse\" \x82\xd3\xe4\x93\x02\x1a:\x01*\"\x15/v1/transfer/postgres\x12{\n" +
	"\x14TransferToClickHouse\x12#.transfer.ClickHouseTransferRequest\x1a\x1a.transfer.TransferResponse\"\"\x82\xd3\xe4\x93\x02\x1c:\x01*\"\x17/v1/transfer/clickhouse\x12i\n" +
	"\x0eTransferToHDFS\x12\x1d.transfer.HDFSTransferRequest\x1a\x1a.transfer.TransferResponse\"\x1c\x82\xd3\xe4\x93\x02\x16:\x01*\"\x11/v1/transfer/hdfs\x12\x81\x01\n" +
	"\x11GetTransferStatus\x12\x1f.transfer.TransferStatusRequest\x1a .transfer.TransferStatusResponse\")\x82\xd3\xe4\x93\x02#\x12!/v1/transfer/status/{transfer_id}\x12m\n" +
	"\x0eCancelTransfer\x12\x1f.transfer.CancelTransferRequest\x1a\x1a.transfer.TransferResponse\"\x1e\x82\xd3\xe4\x93\x02\x18:\x01*\"\x13/v1/transfer/cancelB\x1bZ\x19backend/data-transfer/genb\x06proto3"

var (
	file_transfer_proto_rawDescOnce sync.Once
	file_transfer_proto_rawDescData []byte
)

func file_transfer_proto_rawDescGZIP() []byte {
	file_transfer_proto_rawDescOnce.Do(func() {
		file_transfer_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_transfer_proto_rawDesc), len(file_transfer_proto_rawDesc)))
	})
	return file_transfer_proto_rawDescData
}

var file_transfer_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_transfer_proto_goTypes = []any{
	(*PostgresTransferRequest)(nil),   // 0: transfer.PostgresTransferRequest
	(*ClickHouseTransferRequest)(nil), // 1: transfer.ClickHouseTransferRequest
	(*HDFSTransferRequest)(nil),       // 2: transfer.HDFSTransferRequest
	(*TransferStatusRequest)(nil),     // 3: transfer.TransferStatusRequest
	(*CancelTransferRequest)(nil),     // 4: transfer.CancelTransferRequest
	(*PostgresConfig)(nil),            // 5: transfer.PostgresConfig
	(*ClickHouseConfig)(nil),          // 6: transfer.ClickHouseConfig
	(*HDFSConfig)(nil),                // 7: transfer.HDFSConfig
	(*TransferOptions)(nil),           // 8: transfer.TransferOptions
	(*TransferResponse)(nil),          // 9: transfer.TransferResponse
	(*TransferStatusResponse)(nil),    // 10: transfer.TransferStatusResponse
	nil,                               // 11: transfer.HDFSConfig.PropertiesEntry
	nil,                               // 12: transfer.TransferStatusResponse.MetadataEntry
}
var file_transfer_proto_depIdxs = []int32{
	5,  // 0: transfer.PostgresTransferRequest.target_config:type_name -> transfer.PostgresConfig
	8,  // 1: transfer.PostgresTransferRequest.options:type_name -> transfer.TransferOptions
	6,  // 2: transfer.ClickHouseTransferRequest.target_config:type_name -> transfer.ClickHouseConfig
	8,  // 3: transfer.ClickHouseTransferRequest.options:type_name -> transfer.TransferOptions
	7,  // 4: transfer.HDFSTransferRequest.target_config:type_name -> transfer.HDFSConfig
	8,  // 5: transfer.HDFSTransferRequest.options:type_name -> transfer.TransferOptions
	11, // 6: transfer.HDFSConfig.properties:type_name -> transfer.HDFSConfig.PropertiesEntry
	12, // 7: transfer.TransferStatusResponse.metadata:type_name -> transfer.TransferStatusResponse.MetadataEntry
	0,  // 8: transfer.DataTransfer.TransferToPostgres:input_type -> transfer.PostgresTransferRequest
	1,  // 9: transfer.DataTransfer.TransferToClickHouse:input_type -> transfer.ClickHouseTransferRequest
	2,  // 10: transfer.DataTransfer.TransferToHDFS:input_type -> transfer.HDFSTransferRequest
	3,  // 11: transfer.DataTransfer.GetTransferStatus:input_type -> transfer.TransferStatusRequest
	4,  // 12: transfer.DataTransfer.CancelTransfer:input_type -> transfer.CancelTransferRequest
	9,  // 13: transfer.DataTransfer.TransferToPostgres:output_type -> transfer.TransferResponse
	9,  // 14: transfer.DataTransfer.TransferToClickHouse:output_type -> transfer.TransferResponse
	9,  // 15: transfer.DataTransfer.TransferToHDFS:output_type -> transfer.TransferResponse
	10, // 16: transfer.DataTransfer.GetTransferStatus:output_type -> transfer.TransferStatusResponse
	9,  // 17: transfer.DataTransfer.CancelTransfer:output_type -> transfer.TransferResponse
	13, // [13:18] is the sub-list for method output_type
	8,  // [8:13] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_transfer_proto_init() }
func file_transfer_proto_init() {
	if File_transfer_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_transfer_proto_rawDesc), len(file_transfer_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_transfer_proto_goTypes,
		DependencyIndexes: file_transfer_proto_depIdxs,
		MessageInfos:      file_transfer_proto_msgTypes,
	}.Build()
	File_transfer_proto = out.File
	file_transfer_proto_goTypes = nil
	file_transfer_proto_depIdxs = nil
}
