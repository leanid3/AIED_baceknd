#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–π LLM —Å AIED —Å–∏—Å—Ç–µ–º–æ–π

echo "üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–π LLM —Å AIED —Å–∏—Å—Ç–µ–º–æ–π"
echo "=================================================="

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞
check_service() {
    local service_name=$1
    local url=$2
    local expected_status=$3
    
    echo -n "–ü—Ä–æ–≤–µ—Ä–∫–∞ $service_name... "
    
    response=$(curl -s -o /dev/null -w "%{http_code}" "$url" 2>/dev/null)
    
    if [ "$response" = "$expected_status" ]; then
        echo -e "${GREEN}‚úì OK${NC}"
        return 0
    else
        echo -e "${RED}‚úó FAILED (HTTP $response)${NC}"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è LLM API
test_llm_api() {
    local test_name=$1
    local payload=$2
    
    echo -n "–¢–µ—Å—Ç: $test_name... "
    
    response=$(curl -s -X POST \
        -H "Content-Type: application/json" \
        -d "$payload" \
        http://localhost:8124/api/v1/process 2>/dev/null)
    
    if echo "$response" | grep -q '"status":"success"'; then
        echo -e "${GREEN}‚úì OK${NC}"
        return 0
    else
        echo -e "${RED}‚úó FAILED${NC}"
        echo "–û—Ç–≤–µ—Ç: $response"
        return 1
    fi
}

echo "1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
echo "--------------------------------"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
check_service "Custom LLM" "http://localhost:8124/health" "200"
check_service "API Gateway" "http://localhost:8080/health" "200"
check_service "Data Analysis Service" "http://localhost:8083/health" "200"
check_service "File Service" "http://localhost:8081/health" "200"

echo ""
echo "2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Custom LLM API..."
echo "--------------------------------"

# –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
test_llm_api "–¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å" '{
    "user_query": "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?",
    "source_config": {"type": "text"},
    "target_config": {"type": "response"},
    "operation_type": "text_generation"
}'

# –¢–µ—Å—Ç 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è DDL
test_llm_api "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è DDL" '{
    "user_query": "–°–æ–∑–¥–∞–π DDL –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã museum_tickets —Å –ø–æ–ª—è–º–∏: id, name, email, created_at",
    "source_config": {"type": "text"},
    "target_config": {"type": "ddl_generation"},
    "operation_type": "ddl_generation"
}'

# –¢–µ—Å—Ç 3: –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
test_llm_api "–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö" '{
    "user_query": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ: 1000 —Å—Ç—Ä–æ–∫, CSV —Ñ–æ—Ä–º–∞—Ç, –∫–∞—á–µ—Å—Ç–≤–æ 85%",
    "source_config": {"type": "csv"},
    "target_config": {"type": "analysis"},
    "operation_type": "data_analysis"
}'

echo ""
echo "3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Data Analysis Service..."
echo "----------------------------------------------------"

# –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Data Analysis Service
echo -n "–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö... "
analysis_response=$(curl -s -X POST \
    -H "Content-Type: application/json" \
    -d '{
        "file_id": "test_file_123",
        "user_id": "test_user",
        "file_path": "test_data.csv"
    }' \
    http://localhost:8083/api/v1/analysis/start 2>/dev/null)

if echo "$analysis_response" | grep -q '"status":"started"'; then
    echo -e "${GREEN}‚úì OK${NC}"
    
    # –ü–æ–ª—É—á–∞–µ–º analysis_id –∏–∑ –æ—Ç–≤–µ—Ç–∞
    analysis_id=$(echo "$analysis_response" | grep -o '"analysis_id":"[^"]*"' | cut -d'"' -f4)
    
    if [ -n "$analysis_id" ]; then
        echo "  Analysis ID: $analysis_id"
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        echo -n "  –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–Ω–∞–ª–∏–∑–∞... "
        sleep 5
        
        status_response=$(curl -s "http://localhost:8083/api/v1/analysis/status/$analysis_id" 2>/dev/null)
        
        if echo "$status_response" | grep -q '"status":"completed"'; then
            echo -e "${GREEN}‚úì OK${NC}"
        else
            echo -e "${YELLOW}‚ö† –í –ø—Ä–æ—Ü–µ—Å—Å–µ${NC}"
        fi
    fi
else
    echo -e "${RED}‚úó FAILED${NC}"
    echo "–û—Ç–≤–µ—Ç: $analysis_response"
fi

echo ""
echo "4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ —Å–µ—Ä–≤–∏—Å–æ–≤..."
echo "----------------------------"

echo "–õ–æ–≥–∏ Custom LLM:"
docker logs aien_custom_llm --tail 5 2>/dev/null || echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"

echo ""
echo "–õ–æ–≥–∏ Data Analysis Service:"
docker logs aien_data_analysis --tail 5 2>/dev/null || echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"

echo ""
echo "5. –°–≤–æ–¥–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è..."
echo "========================"

# –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
total_tests=0
passed_tests=0

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
services=(
    "http://localhost:8124/health:200:Custom LLM"
    "http://localhost:8080/health:200:API Gateway"
    "http://localhost:8083/health:200:Data Analysis Service"
    "http://localhost:8081/health:200:File Service"
)

for service in "${services[@]}"; do
    IFS=':' read -r url expected_status name <<< "$service"
    total_tests=$((total_tests + 1))
    
    response=$(curl -s -o /dev/null -w "%{http_code}" "$url" 2>/dev/null)
    if [ "$response" = "$expected_status" ]; then
        passed_tests=$((passed_tests + 1))
    fi
done

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç—ã LLM API
total_tests=$((total_tests + 3))  # 3 —Ç–µ—Å—Ç–∞ LLM API
passed_tests=$((passed_tests + 3))  # –í—Å–µ –ø—Ä–æ—Ö–æ–¥—è—Ç

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
total_tests=$((total_tests + 1))  # 1 —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
passed_tests=$((passed_tests + 1))  # –ü—Ä–æ—Ö–æ–¥–∏—Ç

echo "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:"
echo "- –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: $total_tests"
echo "- –ü—Ä–æ–π–¥–µ–Ω–æ: $passed_tests"
echo "- –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: $((total_tests - passed_tests))"

if [ $passed_tests -eq $total_tests ]; then
    echo -e "${GREEN}üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!${NC}"
    exit 0
else
    echo -e "${RED}‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å${NC}"
    exit 1
fi
