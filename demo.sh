#!/bin/bash

# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∏—Å—Ç–µ–º—ã "–ò–Ω–∂–µ–Ω–µ—Ä –¥–∞–Ω–Ω—ã—Ö"

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
API_BASE="http://localhost:8080"
TEST_USER="demo-user-$(date +%s)"

print_header() {
    echo -e "${BLUE}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                    –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´                     ‚ïë"
    echo "‚ïë                    '–ò–ù–ñ–ï–ù–ï–† –î–ê–ù–ù–´–•'                         ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
}

print_step() {
    echo -e "${PURPLE}üîÑ –®–∞–≥ $1: $2${NC}"
}

print_success() {
    echo -e "${GREEN}‚úì${NC} $1"
}

print_error() {
    echo -e "${RED}‚úó${NC} $1"
}

print_info() {
    echo -e "${CYAN}‚Ñπ${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}‚ö†${NC} $1"
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
create_test_file() {
    print_info "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞..."
    
    cat > /tmp/demo-data.csv << EOF
id,name,email,age,department,salary
1,John Doe,john@example.com,30,Engineering,75000
2,Jane Smith,jane@example.com,28,Marketing,65000
3,Bob Johnson,bob@example.com,35,Sales,70000
4,Alice Brown,alice@example.com,32,Engineering,80000
5,Charlie Wilson,charlie@example.com,29,Marketing,60000
6,Diana Davis,diana@example.com,31,Sales,72000
7,Frank Miller,frank@example.com,33,Engineering,85000
8,Grace Lee,grace@example.com,27,Marketing,58000
9,Henry Taylor,henry@example.com,34,Sales,78000
10,Iris White,iris@example.com,26,Engineering,70000
EOF
    
    print_success "–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: /tmp/demo-data.csv"
}

# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
demo_file_upload() {
    print_step "1" "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ —Å–∏—Å—Ç–µ–º—É"
    
    response=$(curl -s -X POST "$API_BASE/v1/files/upload/csv" \
        -H "Content-Type: multipart/form-data" \
        -F "file=@/tmp/demo-data.csv" \
        -F "user_id=$TEST_USER")
    
    if echo "$response" | grep -q "file_id"; then
        FILE_ID=$(echo "$response" | grep -o '"file_id":"[^"]*"' | cut -d'"' -f4)
        print_success "–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ! ID: $FILE_ID"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        print_info "–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ..."
        file_info=$(curl -s -X GET "$API_BASE/v1/files/$FILE_ID?user_id=$TEST_USER")
        echo "$file_info" | jq '.' 2>/dev/null || echo "$file_info"
    else
        print_error "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: $response"
        return 1
    fi
}

# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
demo_dialog_creation() {
    print_step "2" "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π"
    
    response=$(curl -s -X POST "$API_BASE/v1/dialogs" \
        -H "Content-Type: application/json" \
        -d "{
            \"user_id\": \"$TEST_USER\",
            \"title\": \"–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\",
            \"initial_message\": \"–ü—Ä–∏–≤–µ—Ç! –Ø –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö. –ú–æ–∂–µ—à—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∏ –¥–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏?\"
        }")
    
    if echo "$response" | grep -q "dialog_id"; then
        DIALOG_ID=$(echo "$response" | grep -o '"dialog_id":"[^"]*"' | cut -d'"' -f4)
        print_success "–î–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω! ID: $DIALOG_ID"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        print_info "–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞..."
        dialog_history=$(curl -s -X GET "$API_BASE/v1/dialogs/$DIALOG_ID/messages?user_id=$TEST_USER")
        echo "$dialog_history" | jq '.' 2>/dev/null || echo "$dialog_history"
    else
        print_error "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞: $response"
        return 1
    fi
}

# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞
demo_pipeline_creation() {
    print_step "3" "–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö"
    
    response=$(curl -s -X POST "$API_BASE/v1/pipelines" \
        -H "Content-Type: application/json" \
        -d "{
            \"source\": {
                \"type\": {
                    \"file\": {
                        \"format\": \"csv\",
                        \"url\": \"users/$TEST_USER/$FILE_ID/demo-data.csv\"
                    }
                }
            },
            \"target\": {
                \"type\": \"postgres\",
                \"table_name\": \"employees\"
            },
            \"user_id\": \"$TEST_USER\",
            \"file_id\": \"$FILE_ID\"
        }")
    
    if echo "$response" | grep -q "pipeline_id"; then
        PIPELINE_ID=$(echo "$response" | grep -o '"pipeline_id":"[^"]*"' | cut -d'"' -f4)
        print_success "–ü–∞–π–ø–ª–∞–π–Ω —Å–æ–∑–¥–∞–Ω! ID: $PIPELINE_ID"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–π–ø–ª–∞–π–Ω–µ
        print_info "–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–π–ø–ª–∞–π–Ω–µ..."
        pipeline_info=$(curl -s -X GET "$API_BASE/v1/pipelines/$PIPELINE_ID")
        echo "$pipeline_info" | jq '.' 2>/dev/null || echo "$pipeline_info"
    else
        print_error "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞: $response"
        return 1
    fi
}

# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Airflow
demo_airflow_check() {
    print_step "4" "–ü—Ä–æ–≤–µ—Ä–∫–∞ Airflow DAG"
    
    print_info "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ DAG –∏–∑ Airflow..."
    dags_response=$(curl -s -X GET "http://localhost:8082/api/v1/dags")
    if echo "$dags_response" | grep -q "dags"; then
        print_success "DAG –≤ Airflow –¥–æ—Å—Ç—É–ø–Ω—ã"
        echo "$dags_response" | jq '.dags[].dag_id' 2>/dev/null || echo "DAG –Ω–∞–π–¥–µ–Ω—ã"
    else
        print_warning "Airflow –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ DAG –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    fi
}

# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ MinIO
demo_minio_check() {
    print_step "5" "–ü—Ä–æ–≤–µ—Ä–∫–∞ MinIO —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"
    
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ MinIO..."
    if docker-compose exec -T minio mc ls minio/files >/dev/null 2>&1; then
        print_success "MinIO –¥–æ—Å—Ç—É–ø–µ–Ω"
        print_info "–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ MinIO:"
        docker-compose exec -T minio mc ls minio/files/users/ 2>/dev/null || echo "–§–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    else
        print_warning "MinIO –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
}

# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
demo_database_check() {
    print_step "6" "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
    
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL..."
    if docker-compose exec -T postgres pg_isready -U testuser >/dev/null 2>&1; then
        print_success "PostgreSQL –¥–æ—Å—Ç—É–ø–Ω–∞"
        
        print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö..."
        docker-compose exec -T postgres psql -U testuser -d testdb -c "SELECT COUNT(*) FROM files;" 2>/dev/null || echo "–¢–∞–±–ª–∏—Ü–∞ files –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        docker-compose exec -T postgres psql -U testuser -d testdb -c "SELECT COUNT(*) FROM dialogs;" 2>/dev/null || echo "–¢–∞–±–ª–∏—Ü–∞ dialogs –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    else
        print_warning "PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    fi
}

# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ LLM
demo_llm_check() {
    print_step "7" "–ü—Ä–æ–≤–µ—Ä–∫–∞ LLM —Å–µ—Ä–≤–∏—Å–∞"
    
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ Ollama..."
    if curl -s http://localhost:11434/api/tags >/dev/null 2>&1; then
        print_success "Ollama –¥–æ—Å—Ç—É–ø–µ–Ω"
        
        print_info "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:"
        curl -s http://localhost:11434/api/tags | jq '.models[].name' 2>/dev/null || echo "–ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    else
        print_warning "Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
}

# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
demo_monitoring() {
    print_step "8" "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã"
    
    print_info "–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
    docker-compose ps
    
    print_info "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:"
    docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}" | head -10
    
    print_info "–õ–æ–≥–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π:"
    docker-compose logs --tail=5 api-gateway
}

# –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
cleanup() {
    print_info "–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏..."
    
    # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    rm -f /tmp/demo-data.csv
    
    print_success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    print_header
    
    print_info "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã '–ò–Ω–∂–µ–Ω–µ—Ä –¥–∞–Ω–Ω—ã—Ö'"
    print_info "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $TEST_USER"
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞
    if ! curl -s "$API_BASE/health" >/dev/null 2>&1; then
        print_error "–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: ./start.sh start"
        exit 1
    fi
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    create_test_file
    echo ""
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    demo_file_upload
    echo ""
    
    demo_dialog_creation
    echo ""
    
    demo_pipeline_creation
    echo ""
    
    demo_airflow_check
    echo ""
    
    demo_minio_check
    echo ""
    
    demo_database_check
    echo ""
    
    demo_llm_check
    echo ""
    
    demo_monitoring
    echo ""
    
    # –û—á–∏—Å—Ç–∫–∞
    cleanup
    echo ""
    
    print_success "üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
    echo ""
    echo "–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:"
    echo "  ./quick-test.sh      - –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    echo "  ./test-workflow.sh   - –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    echo "  ./check-system.sh    - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
    echo ""
    echo "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:"
    echo "  README.md                    - –û—Å–Ω–æ–≤–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"
    echo "  TESTING_INSTRUCTIONS.md     - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é"
    echo "  USER_WORKFLOW_TESTING.md    - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ workflow"
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"