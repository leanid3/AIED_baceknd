#!/bin/bash

# –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
API_BASE="http://localhost:8080"
FILE_SERVICE_BASE="http://localhost:8081"
AIRFLOW_BASE="http://localhost:8082"
TEST_USER="quick-test-$(date +%s)"

print_header() {
    echo -e "${BLUE}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                    –ë–´–°–¢–†–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï                      ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
}

print_success() {
    echo -e "${GREEN}‚úì${NC} $1"
}

print_error() {
    echo -e "${RED}‚úó${NC} $1"
}

print_info() {
    echo -e "${BLUE}‚Ñπ${NC} $1"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API Gateway
test_api_gateway() {
    print_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API Gateway..."
    
    if curl -s "$API_BASE/health" >/dev/null 2>&1; then
        print_success "API Gateway –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        print_error "API Gateway –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è File Service
test_file_service() {
    print_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ File Service..."
    
    if curl -s "$FILE_SERVICE_BASE/health" >/dev/null 2>&1; then
        print_success "File Service –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        print_error "File Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Airflow
test_airflow() {
    print_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Airflow..."
    
    if curl -s "$AIRFLOW_BASE/health" >/dev/null 2>&1; then
        print_success "Airflow –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        print_error "Airflow –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ–±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞
test_small_file_upload() {
    print_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ–±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞..."
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    echo "id,name,email
1,John Doe,john@example.com
2,Jane Smith,jane@example.com
3,Bob Johnson,bob@example.com" > /tmp/test-small.csv
    
    response=$(curl -s -X POST "$API_BASE/v1/files/upload/csv" \
        -H "Content-Type: multipart/form-data" \
        -F "file=@/tmp/test-small.csv" \
        -F "user_id=$TEST_USER")
    
    if echo "$response" | grep -q "file_id"; then
        FILE_ID=$(echo "$response" | grep -o '"file_id":"[^"]*"' | cut -d'"' -f4)
        print_success "–ù–µ–±–æ–ª—å—à–æ–π —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, ID: $FILE_ID"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        info_response=$(curl -s -X GET "$API_BASE/v1/files/$FILE_ID?user_id=$TEST_USER")
        if echo "$info_response" | grep -q "file_id"; then
            print_success "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ –ø–æ–ª—É—á–µ–Ω–∞"
        else
            print_error "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ"
        fi
    else
        print_error "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: $response"
        return 1
    fi
    
    # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    rm -f /tmp/test-small.csv
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
test_dialog_creation() {
    print_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞..."
    
    response=$(curl -s -X POST "$API_BASE/v1/dialogs" \
        -H "Content-Type: application/json" \
        -d "{
            \"user_id\": \"$TEST_USER\",
            \"title\": \"–¢–µ—Å—Ç–æ–≤—ã–π –¥–∏–∞–ª–æ–≥\",
            \"initial_message\": \"–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\"
        }")
    
    if echo "$response" | grep -q "dialog_id"; then
        DIALOG_ID=$(echo "$response" | grep -o '"dialog_id":"[^"]*"' | cut -d'"' -f4)
        print_success "–î–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω, ID: $DIALOG_ID"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        history_response=$(curl -s -X GET "$API_BASE/v1/dialogs/$DIALOG_ID/messages?user_id=$TEST_USER")
        if echo "$history_response" | grep -q "messages"; then
            print_success "–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª—É—á–µ–Ω–∞"
        else
            print_error "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞"
        fi
    else
        print_error "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞: $response"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞
test_pipeline_creation() {
    print_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞..."
    
    response=$(curl -s -X POST "$API_BASE/v1/pipelines" \
        -H "Content-Type: application/json" \
        -d "{
            \"source\": {
                \"type\": {
                    \"file\": {
                        \"format\": \"csv\",
                        \"url\": \"users/$TEST_USER/test-file.csv\"
                    }
                }
            },
            \"target\": {
                \"type\": \"postgres\",
                \"table_name\": \"test_table\"
            },
            \"user_id\": \"$TEST_USER\",
            \"file_id\": \"test-file-id\"
        }")
    
    if echo "$response" | grep -q "pipeline_id"; then
        PIPELINE_ID=$(echo "$response" | grep -o '"pipeline_id":"[^"]*"' | cut -d'"' -f4)
        print_success "–ü–∞–π–ø–ª–∞–π–Ω —Å–æ–∑–¥–∞–Ω, ID: $PIPELINE_ID"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–∞–π–ø–ª–∞–π–Ω–∞
        status_response=$(curl -s -X GET "$API_BASE/v1/pipelines/$PIPELINE_ID")
        if echo "$status_response" | grep -q "pipeline_id"; then
            print_success "–°—Ç–∞—Ç—É—Å –ø–∞–π–ø–ª–∞–π–Ω–∞ –ø–æ–ª—É—á–µ–Ω"
        else
            print_error "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞"
        fi
    else
        print_error "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞: $response"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Airflow DAGs
test_airflow_dags() {
    print_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Airflow DAGs..."
    
    response=$(curl -s -X GET "$AIRFLOW_BASE/api/v1/dags")
    if echo "$response" | grep -q "dags"; then
        print_success "DAG –≤ Airflow –¥–æ—Å—Ç—É–ø–Ω—ã"
    else
        print_error "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è DAG –∏–∑ Airflow"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MinIO
test_minio() {
    print_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MinIO..."
    
    if docker-compose exec -T minio mc ls minio/files >/dev/null 2>&1; then
        print_success "MinIO –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        print_error "MinIO –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è PostgreSQL
test_postgresql() {
    print_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PostgreSQL..."
    
    if docker-compose exec -T postgres pg_isready -U testuser >/dev/null 2>&1; then
        print_success "PostgreSQL –¥–æ—Å—Ç—É–ø–Ω–∞"
    else
        print_error "PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Ollama
test_ollama() {
    print_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Ollama..."
    
    if curl -s http://localhost:11434/api/tags >/dev/null 2>&1; then
        print_success "Ollama –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        print_error "Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    print_header
    
    local failed_tests=0
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
    test_api_gateway || failed_tests=$((failed_tests + 1))
    test_file_service || failed_tests=$((failed_tests + 1))
    test_airflow || failed_tests=$((failed_tests + 1))
    
    echo ""
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É
    test_minio || failed_tests=$((failed_tests + 1))
    test_postgresql || failed_tests=$((failed_tests + 1))
    test_ollama || failed_tests=$((failed_tests + 1))
    
    echo ""
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    test_small_file_upload || failed_tests=$((failed_tests + 1))
    test_dialog_creation || failed_tests=$((failed_tests + 1))
    test_pipeline_creation || failed_tests=$((failed_tests + 1))
    test_airflow_dags || failed_tests=$((failed_tests + 1))
    
    echo ""
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if [ $failed_tests -eq 0 ]; then
        echo -e "${GREEN}üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!${NC}"
    else
        echo -e "${RED}‚ùå $failed_tests —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã${NC}"
    fi
    
    echo ""
    echo "–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ./test-workflow.sh"
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"